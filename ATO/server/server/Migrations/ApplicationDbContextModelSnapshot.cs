// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.DB;

namespace server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Casbin.Adapter.EFCore.Entities.CasbinRule<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PType")
                        .HasColumnType("text");

                    b.Property<string>("V0")
                        .HasColumnType("text");

                    b.Property<string>("V1")
                        .HasColumnType("text");

                    b.Property<string>("V2")
                        .HasColumnType("text");

                    b.Property<string>("V3")
                        .HasColumnType("text");

                    b.Property<string>("V4")
                        .HasColumnType("text");

                    b.Property<string>("V5")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CasbinRule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            V0 = "p",
                            V1 = "role_admin",
                            V2 = "*",
                            V3 = "*"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("server.Models.Air", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BortNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Date_create")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(5)
                        .HasColumnType("boolean");

                    b.Property<int>("LifeTime")
                        .HasMaxLength(10)
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.Property<int>("SotrudnikId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SotrudnikId");

                    b.ToTable("Airs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BortNumber = "RU2415115",
                            Date_create = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            LifeTime = 20,
                            Model = "Boing-747",
                            Seats = 200,
                            SotrudnikId = 1
                        },
                        new
                        {
                            Id = 2,
                            BortNumber = "RU2354251",
                            Date_create = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            LifeTime = 25,
                            Model = "Boing-747",
                            Seats = 250,
                            SotrudnikId = 2
                        },
                        new
                        {
                            Id = 3,
                            BortNumber = "RU252521",
                            Date_create = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = false,
                            LifeTime = 25,
                            Model = "Ty-134",
                            Seats = 199,
                            SotrudnikId = 3
                        });
                });

            modelBuilder.Entity("server.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Percent")
                        .HasMaxLength(5)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Эконом класс",
                            Percent = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP",
                            Percent = 30
                        });
                });

            modelBuilder.Entity("server.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PassportNumber")
                        .HasMaxLength(6)
                        .HasColumnType("integer");

                    b.Property<int>("PassportSeia")
                        .HasMaxLength(4)
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Addres = "Smolensk",
                            LastName = "Макушев",
                            Name = "Сергей",
                            PassportNumber = 242342,
                            PassportSeia = 2423,
                            Phone = "812345678",
                            SurName = "Иванович"
                        },
                        new
                        {
                            Id = 2,
                            Addres = "Smolensk",
                            LastName = "Татарин",
                            Name = "Иван",
                            PassportNumber = 535353,
                            PassportSeia = 4646,
                            Phone = "8856564545",
                            SurName = "Степанович"
                        });
                });

            modelBuilder.Entity("server.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AirId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AirId");

                    b.HasIndex("RouteId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirId = 1,
                            DateStart = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = false,
                            RouteId = 1,
                            TimeStart = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            AirId = 2,
                            DateStart = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = false,
                            RouteId = 2,
                            TimeStart = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            AirId = 3,
                            DateStart = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = false,
                            RouteId = 3,
                            TimeStart = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            AirId = 2,
                            DateStart = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            RouteId = 3,
                            TimeStart = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("server.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("Counts")
                        .HasMaxLength(6)
                        .HasColumnType("integer");

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<string>("Mesto")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FlightId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CardId = 1,
                            ClientId = 1,
                            Counts = 1,
                            FlightId = 1,
                            Mesto = "1"
                        },
                        new
                        {
                            Id = 6,
                            CardId = 2,
                            ClientId = 1,
                            Counts = 1,
                            FlightId = 1,
                            Mesto = "2"
                        },
                        new
                        {
                            Id = 7,
                            CardId = 1,
                            ClientId = 1,
                            Counts = 1,
                            FlightId = 4,
                            Mesto = "3"
                        });
                });

            modelBuilder.Entity("server.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Price")
                        .HasMaxLength(10)
                        .HasColumnType("numeric");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Time")
                        .HasMaxLength(5)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 5000m,
                            Start = "Москва",
                            Target = "Санкт-Петербург",
                            Time = 60
                        },
                        new
                        {
                            Id = 2,
                            Price = 9000m,
                            Start = "Москва",
                            Target = "Сочи",
                            Time = 120
                        },
                        new
                        {
                            Id = 3,
                            Price = 7000m,
                            Start = "Москва",
                            Target = "Ростов-на-Дону",
                            Time = 80
                        });
                });

            modelBuilder.Entity("server.Models.Sotrudnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Stage")
                        .HasMaxLength(3)
                        .HasColumnType("integer");

                    b.Property<string>("Sur_name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Sotrudniks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Addres = "Смоленск",
                            Last_name = "Маслюков",
                            Name = "Валерий",
                            Phone = "89556454",
                            Stage = 9,
                            Sur_name = "Степанович"
                        },
                        new
                        {
                            Id = 2,
                            Addres = "Moskva",
                            Last_name = "Новиков",
                            Name = "Станислав",
                            Phone = "89568756454",
                            Stage = 10,
                            Sur_name = "Иванович"
                        },
                        new
                        {
                            Id = 3,
                            Addres = "Roslavl",
                            Last_name = "Скрипкин",
                            Name = "Семен",
                            Phone = "8955665454",
                            Stage = 8,
                            Sur_name = "Эдуардович"
                        });
                });

            modelBuilder.Entity("server.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("User_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Air", b =>
                {
                    b.HasOne("server.Models.Sotrudnik", "Sotrudnik")
                        .WithMany("Airs")
                        .HasForeignKey("SotrudnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sotrudnik");
                });

            modelBuilder.Entity("server.Models.Flight", b =>
                {
                    b.HasOne("server.Models.Air", "Air")
                        .WithMany("Flights")
                        .HasForeignKey("AirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Route", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Air");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("server.Models.Order", b =>
                {
                    b.HasOne("server.Models.Card", "Card")
                        .WithMany("Orders")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Flight", "Flight")
                        .WithMany("Orders")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Client");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("server.Models.Token", b =>
                {
                    b.HasOne("server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Air", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("server.Models.Card", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("server.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("server.Models.Flight", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("server.Models.Route", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("server.Models.Sotrudnik", b =>
                {
                    b.Navigation("Airs");
                });
#pragma warning restore 612, 618
        }
    }
}

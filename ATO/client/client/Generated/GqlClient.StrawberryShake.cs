// <auto-generated/>
#nullable enable

using System.Threading.Tasks;

namespace client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderResult : global::System.IEquatable<AddOrderResult>, IAddOrderResult
    {
        public AddOrderResult(global::client.IAddOrder_AddOrder addOrder)
        {
            AddOrder = addOrder;
        }

        public global::client.IAddOrder_AddOrder AddOrder
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddOrderResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddOrder.Equals(other.AddOrder));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddOrderResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddOrder.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrder_AddOrder_Payload : global::System.IEquatable<AddOrder_AddOrder_Payload>, IAddOrder_AddOrder_Payload
    {
        public AddOrder_AddOrder_Payload(global::System.Boolean? success, global::System.Collections.Generic.IReadOnlyList<global::client.IAddOrder_AddOrder_Errors>? errors)
        {
            Success = success;
            Errors = errors;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddOrder_AddOrder_Errors>? Errors
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddOrder_AddOrder_Payload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Success == other.Success) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddOrder_AddOrder_Payload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (Errors != null)
                {
                    foreach (var Errors_elm in Errors)
                    {
                        hash ^= 397 * Errors_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrder_AddOrder_Errors_Error : global::System.IEquatable<AddOrder_AddOrder_Errors_Error>, IAddOrder_AddOrder_Errors_Error
    {
        public AddOrder_AddOrder_Errors_Error(global::System.String field, global::System.String info)
        {
            Field = field;
            Info = info;
        }

        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddOrder_AddOrder_Errors_Error? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Field.Equals(other.Field)) && Info.Equals(other.Info);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddOrder_AddOrder_Errors_Error)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Field.GetHashCode();
                hash ^= 397 * Info.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrderResult
    {
        public global::client.IAddOrder_AddOrder AddOrder
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrder_AddOrder
    {
        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddOrder_AddOrder_Errors>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrder_AddOrder_Payload : IAddOrder_AddOrder
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrder_AddOrder_Errors
    {
        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrder_AddOrder_Errors_Error : IAddOrder_AddOrder_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsResult : global::System.IEquatable<GetFlightsResult>, IGetFlightsResult
    {
        public GetFlightsResult(global::client.IGetFlights_Flights? flights)
        {
            Flights = flights;
        }

        public global::client.IGetFlights_Flights? Flights
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlightsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Flights is null && other.Flights is null) || Flights != null && Flights.Equals(other.Flights)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlightsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Flights != null)
                {
                    hash ^= 397 * Flights.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_FlightConnection : global::System.IEquatable<GetFlights_Flights_FlightConnection>, IGetFlights_Flights_FlightConnection
    {
        public GetFlights_Flights_FlightConnection(global::System.Collections.Generic.IReadOnlyList<global::client.IGetFlights_Flights_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetFlights_Flights_Nodes>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlights_Flights_FlightConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlights_Flights_FlightConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Flight : global::System.IEquatable<GetFlights_Flights_Nodes_Flight>, IGetFlights_Flights_Nodes_Flight
    {
        public GetFlights_Flights_Nodes_Flight(global::System.Int32 id, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::System.Boolean isActive, global::client.IGetFlights_Flights_Nodes_Route route, global::client.IGetFlights_Flights_Nodes_Air air)
        {
            Id = id;
            DateStart = dateStart;
            TimeStart = timeStart;
            IsActive = isActive;
            Route = route;
            Air = air;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::client.IGetFlights_Flights_Nodes_Route Route
        {
            get;
        }

        public global::client.IGetFlights_Flights_Nodes_Air Air
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlights_Flights_Nodes_Flight? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && DateStart.Equals(other.DateStart) && TimeStart.Equals(other.TimeStart) && IsActive == other.IsActive && Route.Equals(other.Route) && Air.Equals(other.Air);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlights_Flights_Nodes_Flight)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * DateStart.GetHashCode();
                hash ^= 397 * TimeStart.GetHashCode();
                hash ^= 397 * IsActive.GetHashCode();
                hash ^= 397 * Route.GetHashCode();
                hash ^= 397 * Air.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Route_Route : global::System.IEquatable<GetFlights_Flights_Nodes_Route_Route>, IGetFlights_Flights_Nodes_Route_Route
    {
        public GetFlights_Flights_Nodes_Route_Route(global::System.String start, global::System.String target, global::System.Int32 time)
        {
            Start = start;
            Target = target;
            Time = time;
        }

        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlights_Flights_Nodes_Route_Route? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Start.Equals(other.Start)) && Target.Equals(other.Target) && Time == other.Time;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlights_Flights_Nodes_Route_Route)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Start.GetHashCode();
                hash ^= 397 * Target.GetHashCode();
                hash ^= 397 * Time.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Air_Air : global::System.IEquatable<GetFlights_Flights_Nodes_Air_Air>, IGetFlights_Flights_Nodes_Air_Air
    {
        public GetFlights_Flights_Nodes_Air_Air(global::System.Int32 seats)
        {
            Seats = seats;
        }

        public global::System.Int32 Seats
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlights_Flights_Nodes_Air_Air? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Seats == other.Seats);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlights_Flights_Nodes_Air_Air)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Seats.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlightsResult
    {
        public global::client.IGetFlights_Flights? Flights
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetFlights_Flights_Nodes>? Nodes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_FlightConnection : IGetFlights_Flights
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::client.IGetFlights_Flights_Nodes_Route Route
        {
            get;
        }

        public global::client.IGetFlights_Flights_Nodes_Air Air
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Flight : IGetFlights_Flights_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Route
    {
        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Route_Route : IGetFlights_Flights_Nodes_Route
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Air
    {
        public global::System.Int32 Seats
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Air_Air : IGetFlights_Flights_Nodes_Air
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersResult : global::System.IEquatable<GetOrdersResult>, IGetOrdersResult
    {
        public GetOrdersResult(global::client.IGetOrders_Orders? orders)
        {
            Orders = orders;
        }

        public global::client.IGetOrders_Orders? Orders
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrdersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Orders is null && other.Orders is null) || Orders != null && Orders.Equals(other.Orders)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrdersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Orders != null)
                {
                    hash ^= 397 * Orders.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_OrderConnection : global::System.IEquatable<GetOrders_Orders_OrderConnection>, IGetOrders_Orders_OrderConnection
    {
        public GetOrders_Orders_OrderConnection(global::System.Collections.Generic.IReadOnlyList<global::client.IGetOrders_Orders_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetOrders_Orders_Nodes>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_OrderConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_OrderConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Order : global::System.IEquatable<GetOrders_Orders_Nodes_Order>, IGetOrders_Orders_Nodes_Order
    {
        public GetOrders_Orders_Nodes_Order(global::System.Int32 id, global::System.String mesto, global::System.Int32 counts, global::client.IGetOrders_Orders_Nodes_Client client, global::client.IGetOrders_Orders_Nodes_Flight flight)
        {
            Id = id;
            Mesto = mesto;
            Counts = counts;
            Client = client;
            Flight = flight;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Mesto
        {
            get;
        }

        public global::System.Int32 Counts
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Client Client
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Flight Flight
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Order? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Mesto.Equals(other.Mesto) && Counts == other.Counts && Client.Equals(other.Client) && Flight.Equals(other.Flight);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Order)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Mesto.GetHashCode();
                hash ^= 397 * Counts.GetHashCode();
                hash ^= 397 * Client.GetHashCode();
                hash ^= 397 * Flight.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Client_Client : global::System.IEquatable<GetOrders_Orders_Nodes_Client_Client>, IGetOrders_Orders_Nodes_Client_Client
    {
        public GetOrders_Orders_Nodes_Client_Client(global::System.String lastName, global::System.String name, global::System.String surName, global::System.Int32 passportNumber, global::System.Int32 passportSeia)
        {
            LastName = lastName;
            Name = name;
            SurName = surName;
            PassportNumber = passportNumber;
            PassportSeia = passportSeia;
        }

        public global::System.String LastName
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String SurName
        {
            get;
        }

        public global::System.Int32 PassportNumber
        {
            get;
        }

        public global::System.Int32 PassportSeia
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Client_Client? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (LastName.Equals(other.LastName)) && Name.Equals(other.Name) && SurName.Equals(other.SurName) && PassportNumber == other.PassportNumber && PassportSeia == other.PassportSeia;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Client_Client)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LastName.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * SurName.GetHashCode();
                hash ^= 397 * PassportNumber.GetHashCode();
                hash ^= 397 * PassportSeia.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Flight_Flight : global::System.IEquatable<GetOrders_Orders_Nodes_Flight_Flight>, IGetOrders_Orders_Nodes_Flight_Flight
    {
        public GetOrders_Orders_Nodes_Flight_Flight(global::System.Int32 id, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::client.IGetOrders_Orders_Nodes_Flight_Route route)
        {
            Id = id;
            DateStart = dateStart;
            TimeStart = timeStart;
            Route = route;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Flight_Route Route
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Flight_Flight? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && DateStart.Equals(other.DateStart) && TimeStart.Equals(other.TimeStart) && Route.Equals(other.Route);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Flight_Flight)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * DateStart.GetHashCode();
                hash ^= 397 * TimeStart.GetHashCode();
                hash ^= 397 * Route.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Flight_Route_Route : global::System.IEquatable<GetOrders_Orders_Nodes_Flight_Route_Route>, IGetOrders_Orders_Nodes_Flight_Route_Route
    {
        public GetOrders_Orders_Nodes_Flight_Route_Route(global::System.String start, global::System.String target, global::System.Int32 time, global::System.Decimal price)
        {
            Start = start;
            Target = target;
            Time = time;
            Price = price;
        }

        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public global::System.Decimal Price
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Flight_Route_Route? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Start.Equals(other.Start)) && Target.Equals(other.Target) && Time == other.Time && Price == other.Price;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Flight_Route_Route)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Start.GetHashCode();
                hash ^= 397 * Target.GetHashCode();
                hash ^= 397 * Time.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrdersResult
    {
        public global::client.IGetOrders_Orders? Orders
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetOrders_Orders_Nodes>? Nodes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_OrderConnection : IGetOrders_Orders
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Mesto
        {
            get;
        }

        public global::System.Int32 Counts
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Client Client
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Flight Flight
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Order : IGetOrders_Orders_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Client
    {
        public global::System.String LastName
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String SurName
        {
            get;
        }

        public global::System.Int32 PassportNumber
        {
            get;
        }

        public global::System.Int32 PassportSeia
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Client_Client : IGetOrders_Orders_Nodes_Client
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Flight
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Flight_Route Route
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Flight_Flight : IGetOrders_Orders_Nodes_Flight
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Flight_Route
    {
        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public global::System.Decimal Price
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Flight_Route_Route : IGetOrders_Orders_Nodes_Flight_Route
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResult : global::System.IEquatable<RefreshTokenResult>, IRefreshTokenResult
    {
        public RefreshTokenResult(global::client.IRefreshToken_RefreshToken refreshToken)
        {
            RefreshToken = refreshToken;
        }

        public global::client.IRefreshToken_RefreshToken RefreshToken
        {
            get;
        }

        public virtual global::System.Boolean Equals(RefreshTokenResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RefreshToken.Equals(other.RefreshToken));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RefreshTokenResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RefreshToken.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshToken_RefreshToken_LoginPayload : global::System.IEquatable<RefreshToken_RefreshToken_LoginPayload>, IRefreshToken_RefreshToken_LoginPayload
    {
        public RefreshToken_RefreshToken_LoginPayload(global::client.IRefreshToken_RefreshToken_Token? token)
        {
            Token = token;
        }

        public global::client.IRefreshToken_RefreshToken_Token? Token
        {
            get;
        }

        public virtual global::System.Boolean Equals(RefreshToken_RefreshToken_LoginPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Token is null && other.Token is null) || Token != null && Token.Equals(other.Token)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RefreshToken_RefreshToken_LoginPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Token != null)
                {
                    hash ^= 397 * Token.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshToken_RefreshToken_Token_Token : global::System.IEquatable<RefreshToken_RefreshToken_Token_Token>, IRefreshToken_RefreshToken_Token_Token
    {
        public RefreshToken_RefreshToken_Token_Token(global::System.String refreshToken, global::System.String accessToken)
        {
            RefreshToken = refreshToken;
            AccessToken = accessToken;
        }

        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }

        public virtual global::System.Boolean Equals(RefreshToken_RefreshToken_Token_Token? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RefreshToken.Equals(other.RefreshToken)) && AccessToken.Equals(other.AccessToken);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RefreshToken_RefreshToken_Token_Token)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RefreshToken.GetHashCode();
                hash ^= 397 * AccessToken.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshTokenResult
    {
        public global::client.IRefreshToken_RefreshToken RefreshToken
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_RefreshToken
    {
        public global::client.IRefreshToken_RefreshToken_Token? Token
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_RefreshToken_LoginPayload : IRefreshToken_RefreshToken
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_RefreshToken_Token
    {
        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_RefreshToken_Token_Token : IRefreshToken_RefreshToken_Token
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInResult : global::System.IEquatable<SignInResult>, ISignInResult
    {
        public SignInResult(global::client.ISignIn_SignIn signIn)
        {
            SignIn = signIn;
        }

        public global::client.ISignIn_SignIn SignIn
        {
            get;
        }

        public virtual global::System.Boolean Equals(SignInResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SignIn.Equals(other.SignIn));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SignInResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SignIn.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignIn_SignIn_LoginPayload : global::System.IEquatable<SignIn_SignIn_LoginPayload>, ISignIn_SignIn_LoginPayload
    {
        public SignIn_SignIn_LoginPayload(global::client.ISignIn_SignIn_Token? token, global::System.Boolean? success, global::System.Collections.Generic.IReadOnlyList<global::client.ISignIn_SignIn_Errors>? errors)
        {
            Token = token;
            Success = success;
            Errors = errors;
        }

        public global::client.ISignIn_SignIn_Token? Token
        {
            get;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.ISignIn_SignIn_Errors>? Errors
        {
            get;
        }

        public virtual global::System.Boolean Equals(SignIn_SignIn_LoginPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Token is null && other.Token is null) || Token != null && Token.Equals(other.Token))) && Success == other.Success && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SignIn_SignIn_LoginPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Token != null)
                {
                    hash ^= 397 * Token.GetHashCode();
                }

                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (Errors != null)
                {
                    foreach (var Errors_elm in Errors)
                    {
                        hash ^= 397 * Errors_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignIn_SignIn_Token_Token : global::System.IEquatable<SignIn_SignIn_Token_Token>, ISignIn_SignIn_Token_Token
    {
        public SignIn_SignIn_Token_Token(global::System.String refreshToken, global::System.String accessToken)
        {
            RefreshToken = refreshToken;
            AccessToken = accessToken;
        }

        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }

        public virtual global::System.Boolean Equals(SignIn_SignIn_Token_Token? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RefreshToken.Equals(other.RefreshToken)) && AccessToken.Equals(other.AccessToken);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SignIn_SignIn_Token_Token)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RefreshToken.GetHashCode();
                hash ^= 397 * AccessToken.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignIn_SignIn_Errors_Error : global::System.IEquatable<SignIn_SignIn_Errors_Error>, ISignIn_SignIn_Errors_Error
    {
        public SignIn_SignIn_Errors_Error(global::System.String field, global::System.String info)
        {
            Field = field;
            Info = info;
        }

        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }

        public virtual global::System.Boolean Equals(SignIn_SignIn_Errors_Error? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Field.Equals(other.Field)) && Info.Equals(other.Info);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SignIn_SignIn_Errors_Error)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Field.GetHashCode();
                hash ^= 397 * Info.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignInResult
    {
        public global::client.ISignIn_SignIn SignIn
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn
    {
        public global::client.ISignIn_SignIn_Token? Token
        {
            get;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.ISignIn_SignIn_Errors>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_LoginPayload : ISignIn_SignIn
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_Token
    {
        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_Token_Token : ISignIn_SignIn_Token
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_Errors
    {
        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_Errors_Error : ISignIn_SignIn_Errors
    {
    }

    /// <summary>
    /// Represents the operation service of the AddOrder GraphQL operation
    /// <code>
    /// mutation AddOrder($mesto: String!, $counts: Int!, $airId: Int!, $dateStart: DateTime!, $timeStart: DateTime!, $start: String!, $target: String!, $name: String!, $price: Decimal!, $Percent: Decimal!) {
    ///   addOrder(mesto: $mesto, counts: $counts, airId: $airId, dateStart: $dateStart, timeStart: $timeStart, start: $start, target: $target, name: $name, price: $price, percent: $Percent) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderMutationDocument : global::StrawberryShake.IDocument
    {
        private AddOrderMutationDocument()
        {
        }

        public static AddOrderMutationDocument Instance
        {
            get;
        }

        = new AddOrderMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x28, 0x24, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x69, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x21, 0x2c, 0x20, 0x24, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x28, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x3a, 0x20, 0x24, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x61, 0x69, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x61, 0x69, 0x72, 0x49, 0x64, 0x2c, 0x20, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x24, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2c, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x24, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2c, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "7e756e1a4a936861b01aa1a780397646");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddOrder GraphQL operation
    /// <code>
    /// mutation AddOrder($mesto: String!, $counts: Int!, $airId: Int!, $dateStart: DateTime!, $timeStart: DateTime!, $start: String!, $target: String!, $name: String!, $price: Decimal!, $Percent: Decimal!) {
    ///   addOrder(mesto: $mesto, counts: $counts, airId: $airId, dateStart: $dateStart, timeStart: $timeStart, start: $start, target: $target, name: $name, price: $price, percent: $Percent) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderMutation : global::client.IAddOrderMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddOrderResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter;
        public AddOrderMutation(global::StrawberryShake.IOperationExecutor<IAddOrderResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddOrderResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddOrderResult>> ExecuteAsync(global::System.String mesto, global::System.Int32 counts, global::System.Int32 airId, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::System.String start, global::System.String target, global::System.String name, global::System.Decimal price, global::System.Decimal percent, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(mesto, counts, airId, dateStart, timeStart, start, target, name, price, percent);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddOrderResult>> Watch(global::System.String mesto, global::System.Int32 counts, global::System.Int32 airId, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::System.String start, global::System.String target, global::System.String name, global::System.Decimal price, global::System.Decimal percent, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(mesto, counts, airId, dateStart, timeStart, start, target, name, price, percent);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String mesto, global::System.Int32 counts, global::System.Int32 airId, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::System.String start, global::System.String target, global::System.String name, global::System.Decimal price, global::System.Decimal percent)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("mesto", FormatMesto(mesto));
            variables.Add("counts", FormatCounts(counts));
            variables.Add("airId", FormatAirId(airId));
            variables.Add("dateStart", FormatDateStart(dateStart));
            variables.Add("timeStart", FormatTimeStart(timeStart));
            variables.Add("start", FormatStart(start));
            variables.Add("target", FormatTarget(target));
            variables.Add("name", FormatName(name));
            variables.Add("price", FormatPrice(price));
            variables.Add("Percent", FormatPercent(percent));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddOrderMutationDocument.Instance.Hash.Value, name: "AddOrder", document: AddOrderMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMesto(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatCounts(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatAirId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatDateStart(global::System.DateTimeOffset value)
        {
            return _dateTimeFormatter.Format(value);
        }

        private global::System.Object? FormatTimeStart(global::System.DateTimeOffset value)
        {
            return _dateTimeFormatter.Format(value);
        }

        private global::System.Object? FormatStart(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatTarget(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPrice(global::System.Decimal value)
        {
            return _decimalFormatter.Format(value);
        }

        private global::System.Object? FormatPercent(global::System.Decimal value)
        {
            return _decimalFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddOrder GraphQL operation
    /// <code>
    /// mutation AddOrder($mesto: String!, $counts: Int!, $airId: Int!, $dateStart: DateTime!, $timeStart: DateTime!, $start: String!, $target: String!, $name: String!, $price: Decimal!, $Percent: Decimal!) {
    ///   addOrder(mesto: $mesto, counts: $counts, airId: $airId, dateStart: $dateStart, timeStart: $timeStart, start: $start, target: $target, name: $name, price: $price, percent: $Percent) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrderMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddOrderResult>> ExecuteAsync(global::System.String mesto, global::System.Int32 counts, global::System.Int32 airId, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::System.String start, global::System.String target, global::System.String name, global::System.Decimal price, global::System.Decimal percent, global::System.Threading.CancellationToken cancellationToken = default);
		global::System.IObservable<global::StrawberryShake.IOperationResult<IAddOrderResult>> Watch(global::System.String mesto, global::System.Int32 counts, global::System.Int32 airId, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::System.String start, global::System.String target, global::System.String name, global::System.Decimal price, global::System.Decimal percent, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetFlights GraphQL operation
    /// <code>
    /// query GetFlights {
    ///   flights {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       dateStart
    ///       timeStart
    ///       isActive
    ///       route {
    ///         __typename
    ///         start
    ///         target
    ///         time
    ///         ... on Route {
    ///           id
    ///         }
    ///       }
    ///       air {
    ///         __typename
    ///         seats
    ///         ... on Air {
    ///           id
    ///         }
    ///       }
    ///       ... on Flight {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFlightsQueryDocument()
        {
        }

        public static GetFlightsQueryDocument Instance
        {
            get;
        }

        = new GetFlightsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x69, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x61, 0x74, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x69, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "8b807ea7fb2689b13f91d9c2048d44e5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFlights GraphQL operation
    /// <code>
    /// query GetFlights {
    ///   flights {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       dateStart
    ///       timeStart
    ///       isActive
    ///       route {
    ///         __typename
    ///         start
    ///         target
    ///         time
    ///         ... on Route {
    ///           id
    ///         }
    ///       }
    ///       air {
    ///         __typename
    ///         seats
    ///         ... on Air {
    ///           id
    ///         }
    ///       }
    ///       ... on Flight {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsQuery : global::client.IGetFlightsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFlightsResult> _operationExecutor;
        public GetFlightsQuery(global::StrawberryShake.IOperationExecutor<IGetFlightsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFlightsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFlightsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFlightsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFlightsQueryDocument.Instance.Hash.Value, name: "GetFlights", document: GetFlightsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFlights GraphQL operation
    /// <code>
    /// query GetFlights {
    ///   flights {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       dateStart
    ///       timeStart
    ///       isActive
    ///       route {
    ///         __typename
    ///         start
    ///         target
    ///         time
    ///         ... on Route {
    ///           id
    ///         }
    ///       }
    ///       air {
    ///         __typename
    ///         seats
    ///         ... on Air {
    ///           id
    ///         }
    ///       }
    ///       ... on Flight {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlightsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFlightsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFlightsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetOrders GraphQL operation
    /// <code>
    /// query GetOrders {
    ///   orders {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       mesto
    ///       counts
    ///       client {
    ///         __typename
    ///         lastName
    ///         name
    ///         surName
    ///         passportNumber
    ///         passportSeia
    ///         ... on Client {
    ///           id
    ///         }
    ///       }
    ///       flight {
    ///         __typename
    ///         id
    ///         dateStart
    ///         timeStart
    ///         route {
    ///           __typename
    ///           start
    ///           target
    ///           time
    ///           price
    ///           ... on Route {
    ///             id
    ///           }
    ///         }
    ///         ... on Flight {
    ///           id
    ///         }
    ///       }
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetOrdersQueryDocument()
        {
        }

        public static GetOrdersQueryDocument Instance
        {
            get;
        }

        = new GetOrdersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x69, 0x61, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "847e5af9902c547086e33d64df84ea34");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetOrders GraphQL operation
    /// <code>
    /// query GetOrders {
    ///   orders {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       mesto
    ///       counts
    ///       client {
    ///         __typename
    ///         lastName
    ///         name
    ///         surName
    ///         passportNumber
    ///         passportSeia
    ///         ... on Client {
    ///           id
    ///         }
    ///       }
    ///       flight {
    ///         __typename
    ///         id
    ///         dateStart
    ///         timeStart
    ///         route {
    ///           __typename
    ///           start
    ///           target
    ///           time
    ///           price
    ///           ... on Route {
    ///             id
    ///           }
    ///         }
    ///         ... on Flight {
    ///           id
    ///         }
    ///       }
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersQuery : global::client.IGetOrdersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetOrdersResult> _operationExecutor;
        public GetOrdersQuery(global::StrawberryShake.IOperationExecutor<IGetOrdersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetOrdersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetOrdersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetOrdersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetOrdersQueryDocument.Instance.Hash.Value, name: "GetOrders", document: GetOrdersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetOrders GraphQL operation
    /// <code>
    /// query GetOrders {
    ///   orders {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       mesto
    ///       counts
    ///       client {
    ///         __typename
    ///         lastName
    ///         name
    ///         surName
    ///         passportNumber
    ///         passportSeia
    ///         ... on Client {
    ///           id
    ///         }
    ///       }
    ///       flight {
    ///         __typename
    ///         id
    ///         dateStart
    ///         timeStart
    ///         route {
    ///           __typename
    ///           start
    ///           target
    ///           time
    ///           price
    ///           ... on Route {
    ///             id
    ///           }
    ///         }
    ///         ... on Flight {
    ///           id
    ///         }
    ///       }
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrdersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetOrdersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetOrdersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken($token: String!) {
    ///   refreshToken(refreshToken: $token) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenMutationDocument : global::StrawberryShake.IDocument
    {
        private RefreshTokenMutationDocument()
        {
        }

        public static RefreshTokenMutationDocument Instance
        {
            get;
        }

        = new RefreshTokenMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x28, 0x24, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x28, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "25b3a446ed30a78678937f5b3b1fe216");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken($token: String!) {
    ///   refreshToken(refreshToken: $token) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenMutation : global::client.IRefreshTokenMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRefreshTokenResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public RefreshTokenMutation(global::StrawberryShake.IOperationExecutor<IRefreshTokenResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRefreshTokenResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> ExecuteAsync(global::System.String token, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(token);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> Watch(global::System.String token, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(token);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String token)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("token", FormatToken(token));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RefreshTokenMutationDocument.Instance.Hash.Value, name: "RefreshToken", document: RefreshTokenMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatToken(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken($token: String!) {
    ///   refreshToken(refreshToken: $token) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshTokenMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> ExecuteAsync(global::System.String token, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> Watch(global::System.String token, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SignIn GraphQL operation
    /// <code>
    /// mutation SignIn($email: String!, $password: String!) {
    ///   signIn(email: $email, password: $password) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInMutationDocument : global::StrawberryShake.IDocument
    {
        private SignInMutationDocument()
        {
        }

        public static SignInMutationDocument Instance
        {
            get;
        }

        = new SignInMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x28, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x28, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "ee9f51d832f72fa7c258a1b97276da51");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SignIn GraphQL operation
    /// <code>
    /// mutation SignIn($email: String!, $password: String!) {
    ///   signIn(email: $email, password: $password) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInMutation : global::client.ISignInMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISignInResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public SignInMutation(global::StrawberryShake.IOperationExecutor<ISignInResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISignInResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISignInResult>> ExecuteAsync(global::System.String email, global::System.String password, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(email, password);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISignInResult>> Watch(global::System.String email, global::System.String password, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(email, password);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String email, global::System.String password)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("email", FormatEmail(email));
            variables.Add("password", FormatPassword(password));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SignInMutationDocument.Instance.Hash.Value, name: "SignIn", document: SignInMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPassword(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SignIn GraphQL operation
    /// <code>
    /// mutation SignIn($email: String!, $password: String!) {
    ///   signIn(email: $email, password: $password) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignInMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISignInResult>> ExecuteAsync(global::System.String email, global::System.String password, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISignInResult>> Watch(global::System.String email, global::System.String password, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GqlClient : global::client.IGqlClient
    {
        private readonly global::client.IAddOrderMutation _addOrder;
        private readonly global::client.IGetFlightsQuery _getFlights;
        private readonly global::client.IGetOrdersQuery _getOrders;
        private readonly global::client.IRefreshTokenMutation _refreshToken;
        private readonly global::client.ISignInMutation _signIn;
        public GqlClient(global::client.IAddOrderMutation addOrder, global::client.IGetFlightsQuery getFlights, global::client.IGetOrdersQuery getOrders, global::client.IRefreshTokenMutation refreshToken, global::client.ISignInMutation signIn)
        {
            _addOrder = addOrder ?? throw new global::System.ArgumentNullException(nameof(addOrder));
            _getFlights = getFlights ?? throw new global::System.ArgumentNullException(nameof(getFlights));
            _getOrders = getOrders ?? throw new global::System.ArgumentNullException(nameof(getOrders));
            _refreshToken = refreshToken ?? throw new global::System.ArgumentNullException(nameof(refreshToken));
            _signIn = signIn ?? throw new global::System.ArgumentNullException(nameof(signIn));
        }

        public static global::System.String ClientName => "GqlClient";
        public global::client.IAddOrderMutation AddOrder => _addOrder;
        public global::client.IGetFlightsQuery GetFlights => _getFlights;
        public global::client.IGetOrdersQuery GetOrders => _getOrders;
        public global::client.IRefreshTokenMutation RefreshToken => _refreshToken;
        public global::client.ISignInMutation SignIn => _signIn;
    }

    /// <summary>
    /// Represents the GqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGqlClient
    {
        global::client.IAddOrderMutation AddOrder
        {
            get;
        }

        global::client.IGetFlightsQuery GetFlights
        {
            get;
        }

        global::client.IGetOrdersQuery GetOrders
        {
            get;
        }

        global::client.IRefreshTokenMutation RefreshToken
        {
            get;
        }

        global::client.ISignInMutation SignIn
        {
            get;
        }
    }
}

namespace client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FlightEntity
    {
        public FlightEntity(global::System.Int32 id = default !, global::System.DateTimeOffset dateStart = default !, global::System.DateTimeOffset timeStart = default !, global::System.Boolean isActive = default !, global::StrawberryShake.EntityId route = default !, global::StrawberryShake.EntityId air = default !)
        {
            Id = id;
            DateStart = dateStart;
            TimeStart = timeStart;
            IsActive = isActive;
            Route = route;
            Air = air;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::StrawberryShake.EntityId Route
        {
            get;
        }

        public global::StrawberryShake.EntityId Air
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RouteEntity
    {
        public RouteEntity(global::System.String start = default !, global::System.String target = default !, global::System.Int32 time = default !, global::System.Decimal price = default !)
        {
            Start = start;
            Target = target;
            Time = time;
            Price = price;
        }

        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public global::System.Decimal Price
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AirEntity
    {
        public AirEntity(global::System.Int32 seats = default !)
        {
            Seats = seats;
        }

        public global::System.Int32 Seats
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OrderEntity
    {
        public OrderEntity(global::System.Int32 id = default !, global::System.String mesto = default !, global::System.Int32 counts = default !, global::StrawberryShake.EntityId client = default !, global::StrawberryShake.EntityId flight = default !)
        {
            Id = id;
            Mesto = mesto;
            Counts = counts;
            Client = client;
            Flight = flight;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Mesto
        {
            get;
        }

        public global::System.Int32 Counts
        {
            get;
        }

        public global::StrawberryShake.EntityId Client
        {
            get;
        }

        public global::StrawberryShake.EntityId Flight
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ClientEntity
    {
        public ClientEntity(global::System.String lastName = default !, global::System.String name = default !, global::System.String surName = default !, global::System.Int32 passportNumber = default !, global::System.Int32 passportSeia = default !)
        {
            LastName = lastName;
            Name = name;
            SurName = surName;
            PassportNumber = passportNumber;
            PassportSeia = passportSeia;
        }

        public global::System.String LastName
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String SurName
        {
            get;
        }

        public global::System.Int32 PassportNumber
        {
            get;
        }

        public global::System.Int32 PassportSeia
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class TokenEntity
    {
        public TokenEntity(global::System.String refreshToken = default !, global::System.String accessToken = default !)
        {
            RefreshToken = refreshToken;
            AccessToken = accessToken;
        }

        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.AddOrderResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddOrderResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IAddOrderResult);
        public AddOrderResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddOrderResultInfo info)
            {
                return new AddOrderResult(MapNonNullableIAddOrder_AddOrder(info.AddOrder, snapshot));
            }

            throw new global::System.ArgumentException("AddOrderResultInfo expected.");
        }

        private global::client.IAddOrder_AddOrder MapNonNullableIAddOrder_AddOrder(global::client.State.PayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddOrder_AddOrder returnValue = default !;
            if (data.__typename.Equals("Payload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddOrder_AddOrder_Payload(data.Success, MapIAddOrder_AddOrder_ErrorsNonNullableArray(data.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IAddOrder_AddOrder_Errors>? MapIAddOrder_AddOrder_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.IAddOrder_AddOrder_Errors>();
            foreach (global::client.State.ErrorData child in list)
            {
                errors.Add(MapNonNullableIAddOrder_AddOrder_Errors(child, snapshot));
            }

            return errors;
        }

        private global::client.IAddOrder_AddOrder_Errors MapNonNullableIAddOrder_AddOrder_Errors(global::client.State.ErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddOrder_AddOrder_Errors returnValue = default !;
            if (data.__typename.Equals("Error", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddOrder_AddOrder_Errors_Error(data.Field ?? throw new global::System.ArgumentNullException(), data.Info ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddOrderResultInfo(global::client.State.PayloadData addOrder, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddOrder = addOrder;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.PayloadData AddOrder
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddOrderResultInfo(AddOrder, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.GetFlightsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetFlights_Flights_Nodes_Flight> _getFlights_Flights_Nodes_FlightFromFlightEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route> _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air> _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper;
        public GetFlightsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetFlights_Flights_Nodes_Flight> getFlights_Flights_Nodes_FlightFromFlightEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route> getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air> getFlights_Flights_Nodes_Air_AirFromAirEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFlights_Flights_Nodes_FlightFromFlightEntityMapper = getFlights_Flights_Nodes_FlightFromFlightEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_FlightFromFlightEntityMapper));
            _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper = getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper));
            _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper = getFlights_Flights_Nodes_Air_AirFromAirEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_Air_AirFromAirEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IGetFlightsResult);
        public GetFlightsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFlightsResultInfo info)
            {
                return new GetFlightsResult(MapIGetFlights_Flights(info.Flights, snapshot));
            }

            throw new global::System.ArgumentException("GetFlightsResultInfo expected.");
        }

        private global::client.IGetFlights_Flights? MapIGetFlights_Flights(global::client.State.FlightConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFlights_Flights returnValue = default !;
            if (data?.__typename.Equals("FlightConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFlights_Flights_FlightConnection(MapIGetFlights_Flights_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IGetFlights_Flights_Nodes>? MapIGetFlights_Flights_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var flights = new global::System.Collections.Generic.List<global::client.IGetFlights_Flights_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                flights.Add(MapNonNullableIGetFlights_Flights_Nodes(child, snapshot));
            }

            return flights;
        }

        private global::client.IGetFlights_Flights_Nodes MapNonNullableIGetFlights_Flights_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_FlightFromFlightEntityMapper.Map(snapshot.GetEntity<global::client.State.FlightEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetFlights_Flights_Nodes_Route MapNonNullableIGetFlights_Flights_Nodes_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetFlights_Flights_Nodes_Air MapNonNullableIGetFlights_Flights_Nodes_Air(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Air", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper.Map(snapshot.GetEntity<global::client.State.AirEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFlightsResultInfo(global::client.State.FlightConnectionData? flights, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Flights = flights;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.FlightConnectionData? Flights
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFlightsResultInfo(Flights, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_FlightFromFlightEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetFlights_Flights_Nodes_Flight>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route> _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air> _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper;
        public GetFlights_Flights_Nodes_FlightFromFlightEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route> getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air> getFlights_Flights_Nodes_Air_AirFromAirEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper = getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper));
            _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper = getFlights_Flights_Nodes_Air_AirFromAirEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_Air_AirFromAirEntityMapper));
        }

        public GetFlights_Flights_Nodes_Flight Map(global::client.State.FlightEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFlights_Flights_Nodes_Flight(entity.Id, entity.DateStart, entity.TimeStart, entity.IsActive, MapNonNullableIGetFlights_Flights_Nodes_Route(entity.Route, snapshot), MapNonNullableIGetFlights_Flights_Nodes_Air(entity.Air, snapshot));
        }

        private global::client.IGetFlights_Flights_Nodes_Route MapNonNullableIGetFlights_Flights_Nodes_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetFlights_Flights_Nodes_Air MapNonNullableIGetFlights_Flights_Nodes_Air(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Air", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper.Map(snapshot.GetEntity<global::client.State.AirEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFlights_Flights_Nodes_Route_Route Map(global::client.State.RouteEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFlights_Flights_Nodes_Route_Route(entity.Start, entity.Target, entity.Time);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Air_AirFromAirEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFlights_Flights_Nodes_Air_AirFromAirEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFlights_Flights_Nodes_Air_Air Map(global::client.State.AirEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFlights_Flights_Nodes_Air_Air(entity.Seats);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.GetOrdersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.OrderEntity, GetOrders_Orders_Nodes_Order> _getOrders_Orders_Nodes_OrderFromOrderEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client> _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight> _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper;
        public GetOrdersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.OrderEntity, GetOrders_Orders_Nodes_Order> getOrders_Orders_Nodes_OrderFromOrderEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client> getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight> getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getOrders_Orders_Nodes_OrderFromOrderEntityMapper = getOrders_Orders_Nodes_OrderFromOrderEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_OrderFromOrderEntityMapper));
            _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper = getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper));
            _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper = getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper));
            _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper = getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IGetOrdersResult);
        public GetOrdersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetOrdersResultInfo info)
            {
                return new GetOrdersResult(MapIGetOrders_Orders(info.Orders, snapshot));
            }

            throw new global::System.ArgumentException("GetOrdersResultInfo expected.");
        }

        private global::client.IGetOrders_Orders? MapIGetOrders_Orders(global::client.State.OrderConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetOrders_Orders returnValue = default !;
            if (data?.__typename.Equals("OrderConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetOrders_Orders_OrderConnection(MapIGetOrders_Orders_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IGetOrders_Orders_Nodes>? MapIGetOrders_Orders_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var orders = new global::System.Collections.Generic.List<global::client.IGetOrders_Orders_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                orders.Add(MapNonNullableIGetOrders_Orders_Nodes(child, snapshot));
            }

            return orders;
        }

        private global::client.IGetOrders_Orders_Nodes MapNonNullableIGetOrders_Orders_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_OrderFromOrderEntityMapper.Map(snapshot.GetEntity<global::client.State.OrderEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Client MapNonNullableIGetOrders_Orders_Nodes_Client(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Client", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper.Map(snapshot.GetEntity<global::client.State.ClientEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Flight MapNonNullableIGetOrders_Orders_Nodes_Flight(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper.Map(snapshot.GetEntity<global::client.State.FlightEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Flight_Route MapNonNullableIGetOrders_Orders_Nodes_Flight_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetOrdersResultInfo(global::client.State.OrderConnectionData? orders, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Orders = orders;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.OrderConnectionData? Orders
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetOrdersResultInfo(Orders, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_OrderFromOrderEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.OrderEntity, GetOrders_Orders_Nodes_Order>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client> _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight> _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper;
        public GetOrders_Orders_Nodes_OrderFromOrderEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client> getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight> getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper = getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper));
            _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper = getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper));
            _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper = getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper));
        }

        public GetOrders_Orders_Nodes_Order Map(global::client.State.OrderEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Order(entity.Id, entity.Mesto, entity.Counts, MapNonNullableIGetOrders_Orders_Nodes_Client(entity.Client, snapshot), MapNonNullableIGetOrders_Orders_Nodes_Flight(entity.Flight, snapshot));
        }

        private global::client.IGetOrders_Orders_Nodes_Client MapNonNullableIGetOrders_Orders_Nodes_Client(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Client", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper.Map(snapshot.GetEntity<global::client.State.ClientEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Flight MapNonNullableIGetOrders_Orders_Nodes_Flight(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper.Map(snapshot.GetEntity<global::client.State.FlightEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Flight_Route MapNonNullableIGetOrders_Orders_Nodes_Flight_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Client_ClientFromClientEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetOrders_Orders_Nodes_Client_ClientFromClientEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetOrders_Orders_Nodes_Client_Client Map(global::client.State.ClientEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Client_Client(entity.LastName, entity.Name, entity.SurName, entity.PassportNumber, entity.PassportSeia);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper;
        public GetOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper = getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper));
        }

        public GetOrders_Orders_Nodes_Flight_Flight Map(global::client.State.FlightEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Flight_Flight(entity.Id, entity.DateStart, entity.TimeStart, MapNonNullableIGetOrders_Orders_Nodes_Flight_Route(entity.Route, snapshot));
        }

        private global::client.IGetOrders_Orders_Nodes_Flight_Route MapNonNullableIGetOrders_Orders_Nodes_Flight_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetOrders_Orders_Nodes_Flight_Route_Route Map(global::client.State.RouteEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Flight_Route_Route(entity.Start, entity.Target, entity.Time, entity.Price);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.RefreshTokenResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, RefreshToken_RefreshToken_Token_Token> _refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper;
        public RefreshTokenResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, RefreshToken_RefreshToken_Token_Token> refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper = refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper ?? throw new global::System.ArgumentNullException(nameof(refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IRefreshTokenResult);
        public RefreshTokenResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RefreshTokenResultInfo info)
            {
                return new RefreshTokenResult(MapNonNullableIRefreshToken_RefreshToken(info.RefreshToken, snapshot));
            }

            throw new global::System.ArgumentException("RefreshTokenResultInfo expected.");
        }

        private global::client.IRefreshToken_RefreshToken MapNonNullableIRefreshToken_RefreshToken(global::client.State.LoginPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IRefreshToken_RefreshToken returnValue = default !;
            if (data.__typename.Equals("LoginPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new RefreshToken_RefreshToken_LoginPayload(MapIRefreshToken_RefreshToken_Token(data.Token, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::client.IRefreshToken_RefreshToken_Token? MapIRefreshToken_RefreshToken_Token(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Token", global::System.StringComparison.Ordinal))
            {
                return _refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper.Map(snapshot.GetEntity<global::client.State.TokenEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RefreshTokenResultInfo(global::client.State.LoginPayloadData refreshToken, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RefreshToken = refreshToken;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.LoginPayloadData RefreshToken
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RefreshTokenResultInfo(RefreshToken, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshToken_RefreshToken_Token_TokenFromTokenEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, RefreshToken_RefreshToken_Token_Token>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RefreshToken_RefreshToken_Token_TokenFromTokenEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public RefreshToken_RefreshToken_Token_Token Map(global::client.State.TokenEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new RefreshToken_RefreshToken_Token_Token(entity.RefreshToken, entity.AccessToken);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.SignInResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, SignIn_SignIn_Token_Token> _signIn_SignIn_Token_TokenFromTokenEntityMapper;
        public SignInResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, SignIn_SignIn_Token_Token> signIn_SignIn_Token_TokenFromTokenEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _signIn_SignIn_Token_TokenFromTokenEntityMapper = signIn_SignIn_Token_TokenFromTokenEntityMapper ?? throw new global::System.ArgumentNullException(nameof(signIn_SignIn_Token_TokenFromTokenEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.ISignInResult);
        public SignInResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SignInResultInfo info)
            {
                return new SignInResult(MapNonNullableISignIn_SignIn(info.SignIn, snapshot));
            }

            throw new global::System.ArgumentException("SignInResultInfo expected.");
        }

        private global::client.ISignIn_SignIn MapNonNullableISignIn_SignIn(global::client.State.LoginPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISignIn_SignIn returnValue = default !;
            if (data.__typename.Equals("LoginPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new SignIn_SignIn_LoginPayload(MapISignIn_SignIn_Token(data.Token, snapshot), data.Success, MapISignIn_SignIn_ErrorsNonNullableArray(data.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::client.ISignIn_SignIn_Token? MapISignIn_SignIn_Token(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Token", global::System.StringComparison.Ordinal))
            {
                return _signIn_SignIn_Token_TokenFromTokenEntityMapper.Map(snapshot.GetEntity<global::client.State.TokenEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.ISignIn_SignIn_Errors>? MapISignIn_SignIn_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.ISignIn_SignIn_Errors>();
            foreach (global::client.State.ErrorData child in list)
            {
                errors.Add(MapNonNullableISignIn_SignIn_Errors(child, snapshot));
            }

            return errors;
        }

        private global::client.ISignIn_SignIn_Errors MapNonNullableISignIn_SignIn_Errors(global::client.State.ErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISignIn_SignIn_Errors returnValue = default !;
            if (data.__typename.Equals("Error", global::System.StringComparison.Ordinal))
            {
                returnValue = new SignIn_SignIn_Errors_Error(data.Field ?? throw new global::System.ArgumentNullException(), data.Info ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SignInResultInfo(global::client.State.LoginPayloadData signIn, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SignIn = signIn;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.LoginPayloadData SignIn
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SignInResultInfo(SignIn, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignIn_SignIn_Token_TokenFromTokenEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, SignIn_SignIn_Token_Token>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SignIn_SignIn_Token_TokenFromTokenEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public SignIn_SignIn_Token_Token Map(global::client.State.TokenEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new SignIn_SignIn_Token_Token(entity.RefreshToken, entity.AccessToken);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddOrderResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IAddOrderResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AddOrderBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IAddOrderResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddOrderResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddOrderResult Result, AddOrderResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddOrderResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddOrderResult, AddOrderResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddOrderResultInfo(DeserializeNonNullableIAddOrder_AddOrder(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addOrder")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.PayloadData DeserializeNonNullableIAddOrder_AddOrder(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Payload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.PayloadData(typename, success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: DeserializeIAddOrder_AddOrder_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? DeserializeIAddOrder_AddOrder_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.State.ErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                errors.Add(DeserializeNonNullableIAddOrder_AddOrder_Errors(child));
            }

            return errors;
        }

        private global::client.State.ErrorData DeserializeNonNullableIAddOrder_AddOrder_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Error", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.ErrorData(typename, field: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "field")), info: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "info")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetFlightsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IGetFlightsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetFlightsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IGetFlightsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFlightsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFlightsResult Result, GetFlightsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetFlightsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFlightsResult, GetFlightsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.FlightConnectionData? flightsId = default !;
            _entityStore.Update(session =>
            {
                flightsId = DeserializeIGetFlights_Flights(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flights"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFlightsResultInfo(flightsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.FlightConnectionData? DeserializeIGetFlights_Flights(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("FlightConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.FlightConnectionData(typename, nodes: UpdateIGetFlights_Flights_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetFlights_Flights_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var flights = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                flights.Add(UpdateNonNullableIGetFlights_Flights_NodesEntity(session, child, entityIds));
            }

            return flights;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFlights_Flights_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.FlightEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.FlightEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateStart")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeStart")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isActive")), UpdateNonNullableIGetFlights_Flights_Nodes_RouteEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "route"), entityIds), UpdateNonNullableIGetFlights_Flights_Nodes_AirEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "air"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.FlightEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateStart")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeStart")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isActive")), UpdateNonNullableIGetFlights_Flights_Nodes_RouteEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "route"), entityIds), UpdateNonNullableIGetFlights_Flights_Nodes_AirEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "air"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFlights_Flights_Nodes_RouteEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.RouteEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), entity.Price));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFlights_Flights_Nodes_AirEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Air", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.AirEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.AirEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "seats"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.AirEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "seats"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetOrdersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IGetOrdersResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetOrdersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IGetOrdersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetOrdersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetOrdersResult Result, GetOrdersResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetOrdersResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetOrdersResult, GetOrdersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.OrderConnectionData? ordersId = default !;
            _entityStore.Update(session =>
            {
                ordersId = DeserializeIGetOrders_Orders(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orders"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetOrdersResultInfo(ordersId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.OrderConnectionData? DeserializeIGetOrders_Orders(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("OrderConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.OrderConnectionData(typename, nodes: UpdateIGetOrders_Orders_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetOrders_Orders_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var orders = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                orders.Add(UpdateNonNullableIGetOrders_Orders_NodesEntity(session, child, entityIds));
            }

            return orders;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.OrderEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.OrderEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mesto")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "counts")), UpdateNonNullableIGetOrders_Orders_Nodes_ClientEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "client"), entityIds), UpdateNonNullableIGetOrders_Orders_Nodes_FlightEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flight"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.OrderEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mesto")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "counts")), UpdateNonNullableIGetOrders_Orders_Nodes_ClientEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "client"), entityIds), UpdateNonNullableIGetOrders_Orders_Nodes_FlightEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flight"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_Nodes_ClientEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Client", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.ClientEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.ClientEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "surName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportNumber")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportSeia"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.ClientEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "surName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportNumber")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportSeia"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_Nodes_FlightEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.FlightEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.FlightEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateStart")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeStart")), entity.IsActive, UpdateNonNullableIGetOrders_Orders_Nodes_Flight_RouteEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "route"), entityIds), entity.Air));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.FlightEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateStart")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeStart")), default !, UpdateNonNullableIGetOrders_Orders_Nodes_Flight_RouteEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "route"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_Nodes_Flight_RouteEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.RouteEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IRefreshTokenResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IRefreshTokenResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public RefreshTokenBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IRefreshTokenResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IRefreshTokenResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRefreshTokenResult Result, RefreshTokenResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IRefreshTokenResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRefreshTokenResult, RefreshTokenResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.LoginPayloadData refreshTokenId = default !;
            _entityStore.Update(session =>
            {
                refreshTokenId = DeserializeNonNullableIRefreshToken_RefreshToken(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RefreshTokenResultInfo(refreshTokenId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.LoginPayloadData DeserializeNonNullableIRefreshToken_RefreshToken(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LoginPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.LoginPayloadData(typename, token: UpdateIRefreshToken_RefreshToken_TokenEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "token"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIRefreshToken_RefreshToken_TokenEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Token", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.TokenEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.TokenEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accessToken"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.TokenEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accessToken"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.ISignInResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.ISignInResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public SignInBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.ISignInResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<ISignInResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISignInResult Result, SignInResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ISignInResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISignInResult, SignInResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.LoginPayloadData signInId = default !;
            _entityStore.Update(session =>
            {
                signInId = DeserializeNonNullableISignIn_SignIn(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "signIn"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SignInResultInfo(signInId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.LoginPayloadData DeserializeNonNullableISignIn_SignIn(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LoginPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.LoginPayloadData(typename, token: UpdateISignIn_SignIn_TokenEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "token"), entityIds), success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: DeserializeISignIn_SignIn_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateISignIn_SignIn_TokenEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Token", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.TokenEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.TokenEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accessToken"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.TokenEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accessToken"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? DeserializeISignIn_SignIn_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.State.ErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                errors.Add(DeserializeNonNullableISignIn_SignIn_Errors(child));
            }

            return errors;
        }

        private global::client.State.ErrorData DeserializeNonNullableISignIn_SignIn_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Error", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.ErrorData(typename, field: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "field")), info: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "info")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class PayloadData
    {
        public PayloadData(global::System.String __typename, global::System.Boolean? success = default !, global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Success = success;
            Errors = errors;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ErrorData
    {
        public ErrorData(global::System.String __typename, global::System.String? field = default !, global::System.String? info = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Field = field;
            Info = info;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.String? Field
        {
            get;
        }

        public global::System.String? Info
        {
            get;
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FlightConnectionData
    {
        public FlightConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes
        {
            get;
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OrderConnectionData
    {
        public OrderConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginPayloadData
    {
        public LoginPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? token = default !, global::System.Boolean? success = default !, global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Token = token;
            Success = success;
            Errors = errors;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::StrawberryShake.EntityId? Token
        {
            get;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GqlClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Flight" => ParseFlightEntityId(obj, __typename), "Route" => ParseRouteEntityId(obj, __typename), "Air" => ParseAirEntityId(obj, __typename), "Order" => ParseOrderEntityId(obj, __typename), "Client" => ParseClientEntityId(obj, __typename), "Token" => ParseTokenEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Flight" => FormatFlightEntityId(entityId), "Route" => FormatRouteEntityId(entityId), "Air" => FormatAirEntityId(entityId), "Order" => FormatOrderEntityId(entityId), "Client" => FormatClientEntityId(entityId), "Token" => FormatTokenEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseFlightEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatFlightEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRouteEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatRouteEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAirEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatAirEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrderEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatOrderEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseClientEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatClientEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTokenEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatTokenEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GqlClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GqlClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public static partial class GqlClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::client.State.GqlClientStoreAccessor> AddGqlClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::client.State.GqlClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddOrderMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetFlightsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetOrdersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.RefreshTokenMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.SignInMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::client.State.GqlClientStoreAccessor>("GqlClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GqlClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, global::client.GetFlights_Flights_Nodes_Flight>, global::client.State.GetFlights_Flights_Nodes_FlightFromFlightEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, global::client.GetFlights_Flights_Nodes_Route_Route>, global::client.State.GetFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, global::client.GetFlights_Flights_Nodes_Air_Air>, global::client.State.GetFlights_Flights_Nodes_Air_AirFromAirEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.OrderEntity, global::client.GetOrders_Orders_Nodes_Order>, global::client.State.GetOrders_Orders_Nodes_OrderFromOrderEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, global::client.GetOrders_Orders_Nodes_Client_Client>, global::client.State.GetOrders_Orders_Nodes_Client_ClientFromClientEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, global::client.GetOrders_Orders_Nodes_Flight_Flight>, global::client.State.GetOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, global::client.GetOrders_Orders_Nodes_Flight_Route_Route>, global::client.State.GetOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, global::client.RefreshToken_RefreshToken_Token_Token>, global::client.State.RefreshToken_RefreshToken_Token_TokenFromTokenEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, global::client.SignIn_SignIn_Token_Token>, global::client.State.SignIn_SignIn_Token_TokenFromTokenEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddOrderResult>, global::client.State.AddOrderResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddOrderResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IAddOrderMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddOrderResult>, global::client.State.AddOrderBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IAddOrderResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IAddOrderResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddOrderResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.AddOrderMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IAddOrderMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddOrderMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetFlightsResult>, global::client.State.GetFlightsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetFlightsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGetFlightsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetFlightsResult>, global::client.State.GetFlightsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IGetFlightsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IGetFlightsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetFlightsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GetFlightsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGetFlightsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetFlightsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetOrdersResult>, global::client.State.GetOrdersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetOrdersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGetOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetOrdersResult>, global::client.State.GetOrdersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IGetOrdersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IGetOrdersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetOrdersResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GetOrdersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGetOrdersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IRefreshTokenResult>, global::client.State.RefreshTokenResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IRefreshTokenResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IRefreshTokenMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IRefreshTokenResult>, global::client.State.RefreshTokenBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IRefreshTokenResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IRefreshTokenResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IRefreshTokenResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.RefreshTokenMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IRefreshTokenMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.RefreshTokenMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.ISignInResult>, global::client.State.SignInResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.ISignInResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.ISignInMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.ISignInResult>, global::client.State.SignInBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.ISignInResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.ISignInResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.ISignInResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.SignInMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.ISignInMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.SignInMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::client.State.GqlClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GqlClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGqlClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GqlClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

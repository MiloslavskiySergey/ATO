// <auto-generated/>
#nullable enable

namespace client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderResult : global::System.IEquatable<AddOrderResult>, IAddOrderResult
    {
        public AddOrderResult(global::client.IAddOrder_AddOrder addOrder)
        {
            AddOrder = addOrder;
        }

        public global::client.IAddOrder_AddOrder AddOrder
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddOrderResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddOrder.Equals(other.AddOrder));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddOrderResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddOrder.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrder_AddOrder_Payload : global::System.IEquatable<AddOrder_AddOrder_Payload>, IAddOrder_AddOrder_Payload
    {
        public AddOrder_AddOrder_Payload(global::System.Boolean? success, global::System.Collections.Generic.IReadOnlyList<global::client.IAddOrder_AddOrder_Errors>? errors)
        {
            Success = success;
            Errors = errors;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddOrder_AddOrder_Errors>? Errors
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddOrder_AddOrder_Payload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Success == other.Success) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddOrder_AddOrder_Payload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (Errors != null)
                {
                    foreach (var Errors_elm in Errors)
                    {
                        hash ^= 397 * Errors_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrder_AddOrder_Errors_Error : global::System.IEquatable<AddOrder_AddOrder_Errors_Error>, IAddOrder_AddOrder_Errors_Error
    {
        public AddOrder_AddOrder_Errors_Error(global::System.String field, global::System.String info)
        {
            Field = field;
            Info = info;
        }

        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddOrder_AddOrder_Errors_Error? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Field.Equals(other.Field)) && Info.Equals(other.Info);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddOrder_AddOrder_Errors_Error)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Field.GetHashCode();
                hash ^= 397 * Info.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrderResult
    {
        public global::client.IAddOrder_AddOrder AddOrder
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrder_AddOrder
    {
        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddOrder_AddOrder_Errors>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrder_AddOrder_Payload : IAddOrder_AddOrder
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrder_AddOrder_Errors
    {
        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrder_AddOrder_Errors_Error : IAddOrder_AddOrder_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddRouteResult : global::System.IEquatable<AddRouteResult>, IAddRouteResult
    {
        public AddRouteResult(global::client.IAddRoute_AddRoute addRoute)
        {
            AddRoute = addRoute;
        }

        public global::client.IAddRoute_AddRoute AddRoute
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddRouteResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddRoute.Equals(other.AddRoute));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddRouteResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddRoute.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddRoute_AddRoute_Payload : global::System.IEquatable<AddRoute_AddRoute_Payload>, IAddRoute_AddRoute_Payload
    {
        public AddRoute_AddRoute_Payload(global::System.Boolean? success, global::System.Collections.Generic.IReadOnlyList<global::client.IAddRoute_AddRoute_Errors>? errors)
        {
            Success = success;
            Errors = errors;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddRoute_AddRoute_Errors>? Errors
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddRoute_AddRoute_Payload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Success == other.Success) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddRoute_AddRoute_Payload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (Errors != null)
                {
                    foreach (var Errors_elm in Errors)
                    {
                        hash ^= 397 * Errors_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddRoute_AddRoute_Errors_Error : global::System.IEquatable<AddRoute_AddRoute_Errors_Error>, IAddRoute_AddRoute_Errors_Error
    {
        public AddRoute_AddRoute_Errors_Error(global::System.String field, global::System.String info)
        {
            Field = field;
            Info = info;
        }

        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddRoute_AddRoute_Errors_Error? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Field.Equals(other.Field)) && Info.Equals(other.Info);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddRoute_AddRoute_Errors_Error)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Field.GetHashCode();
                hash ^= 397 * Info.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddRouteResult
    {
        public global::client.IAddRoute_AddRoute AddRoute
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddRoute_AddRoute
    {
        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddRoute_AddRoute_Errors>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddRoute_AddRoute_Payload : IAddRoute_AddRoute
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddRoute_AddRoute_Errors
    {
        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddRoute_AddRoute_Errors_Error : IAddRoute_AddRoute_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddSotrudnikResult : global::System.IEquatable<AddSotrudnikResult>, IAddSotrudnikResult
    {
        public AddSotrudnikResult(global::client.IAddSotrudnik_AddSotrudnik addSotrudnik)
        {
            AddSotrudnik = addSotrudnik;
        }

        public global::client.IAddSotrudnik_AddSotrudnik AddSotrudnik
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddSotrudnikResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddSotrudnik.Equals(other.AddSotrudnik));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddSotrudnikResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddSotrudnik.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddSotrudnik_AddSotrudnik_Payload : global::System.IEquatable<AddSotrudnik_AddSotrudnik_Payload>, IAddSotrudnik_AddSotrudnik_Payload
    {
        public AddSotrudnik_AddSotrudnik_Payload(global::System.Boolean? success, global::System.Collections.Generic.IReadOnlyList<global::client.IAddSotrudnik_AddSotrudnik_Errors>? errors)
        {
            Success = success;
            Errors = errors;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddSotrudnik_AddSotrudnik_Errors>? Errors
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddSotrudnik_AddSotrudnik_Payload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Success == other.Success) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddSotrudnik_AddSotrudnik_Payload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (Errors != null)
                {
                    foreach (var Errors_elm in Errors)
                    {
                        hash ^= 397 * Errors_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddSotrudnik_AddSotrudnik_Errors_Error : global::System.IEquatable<AddSotrudnik_AddSotrudnik_Errors_Error>, IAddSotrudnik_AddSotrudnik_Errors_Error
    {
        public AddSotrudnik_AddSotrudnik_Errors_Error(global::System.String field, global::System.String info)
        {
            Field = field;
            Info = info;
        }

        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddSotrudnik_AddSotrudnik_Errors_Error? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Field.Equals(other.Field)) && Info.Equals(other.Info);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddSotrudnik_AddSotrudnik_Errors_Error)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Field.GetHashCode();
                hash ^= 397 * Info.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddSotrudnikResult
    {
        public global::client.IAddSotrudnik_AddSotrudnik AddSotrudnik
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddSotrudnik_AddSotrudnik
    {
        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddSotrudnik_AddSotrudnik_Errors>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddSotrudnik_AddSotrudnik_Payload : IAddSotrudnik_AddSotrudnik
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddSotrudnik_AddSotrudnik_Errors
    {
        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddSotrudnik_AddSotrudnik_Errors_Error : IAddSotrudnik_AddSotrudnik_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddAirResult : global::System.IEquatable<AddAirResult>, IAddAirResult
    {
        public AddAirResult(global::client.IAddAir_AddAir addAir)
        {
            AddAir = addAir;
        }

        public global::client.IAddAir_AddAir AddAir
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddAirResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddAir.Equals(other.AddAir));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddAirResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddAir.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddAir_AddAir_Payload : global::System.IEquatable<AddAir_AddAir_Payload>, IAddAir_AddAir_Payload
    {
        public AddAir_AddAir_Payload(global::System.Boolean? success, global::System.Collections.Generic.IReadOnlyList<global::client.IAddAir_AddAir_Errors>? errors)
        {
            Success = success;
            Errors = errors;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddAir_AddAir_Errors>? Errors
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddAir_AddAir_Payload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Success == other.Success) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddAir_AddAir_Payload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (Errors != null)
                {
                    foreach (var Errors_elm in Errors)
                    {
                        hash ^= 397 * Errors_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddAir_AddAir_Errors_Error : global::System.IEquatable<AddAir_AddAir_Errors_Error>, IAddAir_AddAir_Errors_Error
    {
        public AddAir_AddAir_Errors_Error(global::System.String field, global::System.String info)
        {
            Field = field;
            Info = info;
        }

        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }

        public virtual global::System.Boolean Equals(AddAir_AddAir_Errors_Error? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Field.Equals(other.Field)) && Info.Equals(other.Info);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddAir_AddAir_Errors_Error)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Field.GetHashCode();
                hash ^= 397 * Info.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddAirResult
    {
        public global::client.IAddAir_AddAir AddAir
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddAir_AddAir
    {
        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.IAddAir_AddAir_Errors>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddAir_AddAir_Payload : IAddAir_AddAir
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddAir_AddAir_Errors
    {
        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddAir_AddAir_Errors_Error : IAddAir_AddAir_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirsResult : global::System.IEquatable<GetAirsResult>, IGetAirsResult
    {
        public GetAirsResult(global::client.IGetAirs_Airs? airs)
        {
            Airs = airs;
        }

        public global::client.IGetAirs_Airs? Airs
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetAirsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Airs is null && other.Airs is null) || Airs != null && Airs.Equals(other.Airs)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAirsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Airs != null)
                {
                    hash ^= 397 * Airs.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirs_Airs_AirConnection : global::System.IEquatable<GetAirs_Airs_AirConnection>, IGetAirs_Airs_AirConnection
    {
        public GetAirs_Airs_AirConnection(global::System.Collections.Generic.IReadOnlyList<global::client.IGetAirs_Airs_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetAirs_Airs_Nodes>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetAirs_Airs_AirConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAirs_Airs_AirConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirs_Airs_Nodes_Air : global::System.IEquatable<GetAirs_Airs_Nodes_Air>, IGetAirs_Airs_Nodes_Air
    {
        public GetAirs_Airs_Nodes_Air(global::System.Int32 id, global::System.String bortNumber, global::System.String model, global::System.DateTimeOffset date_Create, global::System.Int32 lifeTime, global::System.Boolean isActive, global::System.Int32 seats, global::client.IGetAirs_Airs_Nodes_Sotrudnik sotrudnik)
        {
            Id = id;
            BortNumber = bortNumber;
            Model = model;
            Date_create = date_Create;
            LifeTime = lifeTime;
            IsActive = isActive;
            Seats = seats;
            Sotrudnik = sotrudnik;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String BortNumber
        {
            get;
        }

        public global::System.String Model
        {
            get;
        }

        public global::System.DateTimeOffset Date_create
        {
            get;
        }

        public global::System.Int32 LifeTime
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::System.Int32 Seats
        {
            get;
        }

        public global::client.IGetAirs_Airs_Nodes_Sotrudnik Sotrudnik
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetAirs_Airs_Nodes_Air? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && BortNumber.Equals(other.BortNumber) && Model.Equals(other.Model) && Date_create.Equals(other.Date_create) && LifeTime == other.LifeTime && IsActive == other.IsActive && Seats == other.Seats && Sotrudnik.Equals(other.Sotrudnik);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAirs_Airs_Nodes_Air)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * BortNumber.GetHashCode();
                hash ^= 397 * Model.GetHashCode();
                hash ^= 397 * Date_create.GetHashCode();
                hash ^= 397 * LifeTime.GetHashCode();
                hash ^= 397 * IsActive.GetHashCode();
                hash ^= 397 * Seats.GetHashCode();
                hash ^= 397 * Sotrudnik.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik : global::System.IEquatable<GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik>, IGetAirs_Airs_Nodes_Sotrudnik_Sotrudnik
    {
        public GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik(global::System.String last_Name, global::System.String name, global::System.String sur_Name)
        {
            Last_name = last_Name;
            Name = name;
            Sur_name = sur_Name;
        }

        public global::System.String Last_name
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String Sur_name
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Last_name.Equals(other.Last_name)) && Name.Equals(other.Name) && Sur_name.Equals(other.Sur_name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Last_name.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Sur_name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetAirsResult
    {
        public global::client.IGetAirs_Airs? Airs
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetAirs_Airs
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetAirs_Airs_Nodes>? Nodes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetAirs_Airs_AirConnection : IGetAirs_Airs
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetAirs_Airs_Nodes
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String BortNumber
        {
            get;
        }

        public global::System.String Model
        {
            get;
        }

        public global::System.DateTimeOffset Date_create
        {
            get;
        }

        public global::System.Int32 LifeTime
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::System.Int32 Seats
        {
            get;
        }

        public global::client.IGetAirs_Airs_Nodes_Sotrudnik Sotrudnik
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetAirs_Airs_Nodes_Air : IGetAirs_Airs_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetAirs_Airs_Nodes_Sotrudnik
    {
        public global::System.String Last_name
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String Sur_name
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetAirs_Airs_Nodes_Sotrudnik_Sotrudnik : IGetAirs_Airs_Nodes_Sotrudnik
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClientsResult : global::System.IEquatable<GetClientsResult>, IGetClientsResult
    {
        public GetClientsResult(global::client.IGetClients_Clients? clients)
        {
            Clients = clients;
        }

        public global::client.IGetClients_Clients? Clients
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetClientsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Clients is null && other.Clients is null) || Clients != null && Clients.Equals(other.Clients)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClientsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Clients != null)
                {
                    hash ^= 397 * Clients.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClients_Clients_ClientConnection : global::System.IEquatable<GetClients_Clients_ClientConnection>, IGetClients_Clients_ClientConnection
    {
        public GetClients_Clients_ClientConnection(global::System.Collections.Generic.IReadOnlyList<global::client.IGetClients_Clients_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetClients_Clients_Nodes>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetClients_Clients_ClientConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClients_Clients_ClientConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClients_Clients_Nodes_Client : global::System.IEquatable<GetClients_Clients_Nodes_Client>, IGetClients_Clients_Nodes_Client
    {
        public GetClients_Clients_Nodes_Client(global::System.Int32 id, global::System.String lastName, global::System.String name, global::System.String surName, global::System.String phone, global::System.String addres, global::System.Int32 passportSeia, global::System.Int32 passportNumber)
        {
            Id = id;
            LastName = lastName;
            Name = name;
            SurName = surName;
            Phone = phone;
            Addres = addres;
            PassportSeia = passportSeia;
            PassportNumber = passportNumber;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String LastName
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String SurName
        {
            get;
        }

        public global::System.String Phone
        {
            get;
        }

        public global::System.String Addres
        {
            get;
        }

        public global::System.Int32 PassportSeia
        {
            get;
        }

        public global::System.Int32 PassportNumber
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetClients_Clients_Nodes_Client? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && LastName.Equals(other.LastName) && Name.Equals(other.Name) && SurName.Equals(other.SurName) && Phone.Equals(other.Phone) && Addres.Equals(other.Addres) && PassportSeia == other.PassportSeia && PassportNumber == other.PassportNumber;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClients_Clients_Nodes_Client)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * LastName.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * SurName.GetHashCode();
                hash ^= 397 * Phone.GetHashCode();
                hash ^= 397 * Addres.GetHashCode();
                hash ^= 397 * PassportSeia.GetHashCode();
                hash ^= 397 * PassportNumber.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetClientsResult
    {
        public global::client.IGetClients_Clients? Clients
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetClients_Clients
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetClients_Clients_Nodes>? Nodes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetClients_Clients_ClientConnection : IGetClients_Clients
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetClients_Clients_Nodes
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String LastName
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String SurName
        {
            get;
        }

        public global::System.String Phone
        {
            get;
        }

        public global::System.String Addres
        {
            get;
        }

        public global::System.Int32 PassportSeia
        {
            get;
        }

        public global::System.Int32 PassportNumber
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetClients_Clients_Nodes_Client : IGetClients_Clients_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsResult : global::System.IEquatable<GetFlightsResult>, IGetFlightsResult
    {
        public GetFlightsResult(global::client.IGetFlights_Flights? flights)
        {
            Flights = flights;
        }

        public global::client.IGetFlights_Flights? Flights
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlightsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Flights is null && other.Flights is null) || Flights != null && Flights.Equals(other.Flights)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlightsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Flights != null)
                {
                    hash ^= 397 * Flights.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_FlightConnection : global::System.IEquatable<GetFlights_Flights_FlightConnection>, IGetFlights_Flights_FlightConnection
    {
        public GetFlights_Flights_FlightConnection(global::System.Collections.Generic.IReadOnlyList<global::client.IGetFlights_Flights_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetFlights_Flights_Nodes>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlights_Flights_FlightConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlights_Flights_FlightConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Flight : global::System.IEquatable<GetFlights_Flights_Nodes_Flight>, IGetFlights_Flights_Nodes_Flight
    {
        public GetFlights_Flights_Nodes_Flight(global::System.Int32 id, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::System.Boolean isActive, global::client.IGetFlights_Flights_Nodes_Route route, global::client.IGetFlights_Flights_Nodes_Air air)
        {
            Id = id;
            DateStart = dateStart;
            TimeStart = timeStart;
            IsActive = isActive;
            Route = route;
            Air = air;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::client.IGetFlights_Flights_Nodes_Route Route
        {
            get;
        }

        public global::client.IGetFlights_Flights_Nodes_Air Air
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlights_Flights_Nodes_Flight? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && DateStart.Equals(other.DateStart) && TimeStart.Equals(other.TimeStart) && IsActive == other.IsActive && Route.Equals(other.Route) && Air.Equals(other.Air);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlights_Flights_Nodes_Flight)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * DateStart.GetHashCode();
                hash ^= 397 * TimeStart.GetHashCode();
                hash ^= 397 * IsActive.GetHashCode();
                hash ^= 397 * Route.GetHashCode();
                hash ^= 397 * Air.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Route_Route : global::System.IEquatable<GetFlights_Flights_Nodes_Route_Route>, IGetFlights_Flights_Nodes_Route_Route
    {
        public GetFlights_Flights_Nodes_Route_Route(global::System.String start, global::System.String target, global::System.Int32 time)
        {
            Start = start;
            Target = target;
            Time = time;
        }

        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlights_Flights_Nodes_Route_Route? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Start.Equals(other.Start)) && Target.Equals(other.Target) && Time == other.Time;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlights_Flights_Nodes_Route_Route)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Start.GetHashCode();
                hash ^= 397 * Target.GetHashCode();
                hash ^= 397 * Time.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Air_Air : global::System.IEquatable<GetFlights_Flights_Nodes_Air_Air>, IGetFlights_Flights_Nodes_Air_Air
    {
        public GetFlights_Flights_Nodes_Air_Air(global::System.Int32 seats)
        {
            Seats = seats;
        }

        public global::System.Int32 Seats
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetFlights_Flights_Nodes_Air_Air? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Seats == other.Seats);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlights_Flights_Nodes_Air_Air)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Seats.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlightsResult
    {
        public global::client.IGetFlights_Flights? Flights
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetFlights_Flights_Nodes>? Nodes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_FlightConnection : IGetFlights_Flights
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::client.IGetFlights_Flights_Nodes_Route Route
        {
            get;
        }

        public global::client.IGetFlights_Flights_Nodes_Air Air
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Flight : IGetFlights_Flights_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Route
    {
        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Route_Route : IGetFlights_Flights_Nodes_Route
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Air
    {
        public global::System.Int32 Seats
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlights_Flights_Nodes_Air_Air : IGetFlights_Flights_Nodes_Air
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersResult : global::System.IEquatable<GetOrdersResult>, IGetOrdersResult
    {
        public GetOrdersResult(global::client.IGetOrders_Orders? orders)
        {
            Orders = orders;
        }

        public global::client.IGetOrders_Orders? Orders
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrdersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Orders is null && other.Orders is null) || Orders != null && Orders.Equals(other.Orders)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrdersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Orders != null)
                {
                    hash ^= 397 * Orders.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_OrderConnection : global::System.IEquatable<GetOrders_Orders_OrderConnection>, IGetOrders_Orders_OrderConnection
    {
        public GetOrders_Orders_OrderConnection(global::System.Collections.Generic.IReadOnlyList<global::client.IGetOrders_Orders_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetOrders_Orders_Nodes>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_OrderConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_OrderConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Order : global::System.IEquatable<GetOrders_Orders_Nodes_Order>, IGetOrders_Orders_Nodes_Order
    {
        public GetOrders_Orders_Nodes_Order(global::System.Int32 id, global::System.String mesto, global::System.Int32 counts, global::client.IGetOrders_Orders_Nodes_Client client, global::client.IGetOrders_Orders_Nodes_Flight flight, global::client.IGetOrders_Orders_Nodes_Card card)
        {
            Id = id;
            Mesto = mesto;
            Counts = counts;
            Client = client;
            Flight = flight;
            Card = card;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Mesto
        {
            get;
        }

        public global::System.Int32 Counts
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Client Client
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Flight Flight
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Card Card
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Order? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Mesto.Equals(other.Mesto) && Counts == other.Counts && Client.Equals(other.Client) && Flight.Equals(other.Flight) && Card.Equals(other.Card);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Order)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Mesto.GetHashCode();
                hash ^= 397 * Counts.GetHashCode();
                hash ^= 397 * Client.GetHashCode();
                hash ^= 397 * Flight.GetHashCode();
                hash ^= 397 * Card.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Client_Client : global::System.IEquatable<GetOrders_Orders_Nodes_Client_Client>, IGetOrders_Orders_Nodes_Client_Client
    {
        public GetOrders_Orders_Nodes_Client_Client(global::System.String lastName, global::System.String name, global::System.String surName, global::System.String phone, global::System.Int32 passportNumber, global::System.Int32 passportSeia)
        {
            LastName = lastName;
            Name = name;
            SurName = surName;
            Phone = phone;
            PassportNumber = passportNumber;
            PassportSeia = passportSeia;
        }

        public global::System.String LastName
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String SurName
        {
            get;
        }

        public global::System.String Phone
        {
            get;
        }

        public global::System.Int32 PassportNumber
        {
            get;
        }

        public global::System.Int32 PassportSeia
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Client_Client? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (LastName.Equals(other.LastName)) && Name.Equals(other.Name) && SurName.Equals(other.SurName) && Phone.Equals(other.Phone) && PassportNumber == other.PassportNumber && PassportSeia == other.PassportSeia;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Client_Client)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LastName.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * SurName.GetHashCode();
                hash ^= 397 * Phone.GetHashCode();
                hash ^= 397 * PassportNumber.GetHashCode();
                hash ^= 397 * PassportSeia.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Flight_Flight : global::System.IEquatable<GetOrders_Orders_Nodes_Flight_Flight>, IGetOrders_Orders_Nodes_Flight_Flight
    {
        public GetOrders_Orders_Nodes_Flight_Flight(global::System.Int32 id, global::System.DateTimeOffset dateStart, global::System.DateTimeOffset timeStart, global::client.IGetOrders_Orders_Nodes_Flight_Route route)
        {
            Id = id;
            DateStart = dateStart;
            TimeStart = timeStart;
            Route = route;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Flight_Route Route
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Flight_Flight? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && DateStart.Equals(other.DateStart) && TimeStart.Equals(other.TimeStart) && Route.Equals(other.Route);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Flight_Flight)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * DateStart.GetHashCode();
                hash ^= 397 * TimeStart.GetHashCode();
                hash ^= 397 * Route.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Card_Card : global::System.IEquatable<GetOrders_Orders_Nodes_Card_Card>, IGetOrders_Orders_Nodes_Card_Card
    {
        public GetOrders_Orders_Nodes_Card_Card(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Card_Card? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Card_Card)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Flight_Route_Route : global::System.IEquatable<GetOrders_Orders_Nodes_Flight_Route_Route>, IGetOrders_Orders_Nodes_Flight_Route_Route
    {
        public GetOrders_Orders_Nodes_Flight_Route_Route(global::System.String start, global::System.String target, global::System.Int32 time, global::System.Decimal price)
        {
            Start = start;
            Target = target;
            Time = time;
            Price = price;
        }

        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public global::System.Decimal Price
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetOrders_Orders_Nodes_Flight_Route_Route? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Start.Equals(other.Start)) && Target.Equals(other.Target) && Time == other.Time && Price == other.Price;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrders_Orders_Nodes_Flight_Route_Route)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Start.GetHashCode();
                hash ^= 397 * Target.GetHashCode();
                hash ^= 397 * Time.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrdersResult
    {
        public global::client.IGetOrders_Orders? Orders
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetOrders_Orders_Nodes>? Nodes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_OrderConnection : IGetOrders_Orders
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Mesto
        {
            get;
        }

        public global::System.Int32 Counts
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Client Client
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Flight Flight
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Card Card
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Order : IGetOrders_Orders_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Client
    {
        public global::System.String LastName
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String SurName
        {
            get;
        }

        public global::System.String Phone
        {
            get;
        }

        public global::System.Int32 PassportNumber
        {
            get;
        }

        public global::System.Int32 PassportSeia
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Client_Client : IGetOrders_Orders_Nodes_Client
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Flight
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::client.IGetOrders_Orders_Nodes_Flight_Route Route
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Flight_Flight : IGetOrders_Orders_Nodes_Flight
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Card
    {
        public global::System.String Name
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Card_Card : IGetOrders_Orders_Nodes_Card
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Flight_Route
    {
        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public global::System.Decimal Price
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrders_Orders_Nodes_Flight_Route_Route : IGetOrders_Orders_Nodes_Flight_Route
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutesResult : global::System.IEquatable<GetRoutesResult>, IGetRoutesResult
    {
        public GetRoutesResult(global::client.IGetRoutes_Routes? routes)
        {
            Routes = routes;
        }

        public global::client.IGetRoutes_Routes? Routes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetRoutesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Routes is null && other.Routes is null) || Routes != null && Routes.Equals(other.Routes)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRoutesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Routes != null)
                {
                    hash ^= 397 * Routes.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutes_Routes_RouteConnection : global::System.IEquatable<GetRoutes_Routes_RouteConnection>, IGetRoutes_Routes_RouteConnection
    {
        public GetRoutes_Routes_RouteConnection(global::System.Collections.Generic.IReadOnlyList<global::client.IGetRoutes_Routes_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetRoutes_Routes_Nodes>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetRoutes_Routes_RouteConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRoutes_Routes_RouteConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutes_Routes_Nodes_Route : global::System.IEquatable<GetRoutes_Routes_Nodes_Route>, IGetRoutes_Routes_Nodes_Route
    {
        public GetRoutes_Routes_Nodes_Route(global::System.Int32 id, global::System.String start, global::System.String target, global::System.Int32 time, global::System.Decimal price)
        {
            Id = id;
            Start = start;
            Target = target;
            Time = time;
            Price = price;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public global::System.Decimal Price
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetRoutes_Routes_Nodes_Route? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Start.Equals(other.Start) && Target.Equals(other.Target) && Time == other.Time && Price == other.Price;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRoutes_Routes_Nodes_Route)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Start.GetHashCode();
                hash ^= 397 * Target.GetHashCode();
                hash ^= 397 * Time.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetRoutesResult
    {
        public global::client.IGetRoutes_Routes? Routes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetRoutes_Routes
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetRoutes_Routes_Nodes>? Nodes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetRoutes_Routes_RouteConnection : IGetRoutes_Routes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetRoutes_Routes_Nodes
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public global::System.Decimal Price
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetRoutes_Routes_Nodes_Route : IGetRoutes_Routes_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniksResult : global::System.IEquatable<GetSotrudniksResult>, IGetSotrudniksResult
    {
        public GetSotrudniksResult(global::client.IGetSotrudniks_Sotrudniks? sotrudniks)
        {
            Sotrudniks = sotrudniks;
        }

        public global::client.IGetSotrudniks_Sotrudniks? Sotrudniks
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSotrudniksResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Sotrudniks is null && other.Sotrudniks is null) || Sotrudniks != null && Sotrudniks.Equals(other.Sotrudniks)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSotrudniksResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Sotrudniks != null)
                {
                    hash ^= 397 * Sotrudniks.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniks_Sotrudniks_SotrudnikConnection : global::System.IEquatable<GetSotrudniks_Sotrudniks_SotrudnikConnection>, IGetSotrudniks_Sotrudniks_SotrudnikConnection
    {
        public GetSotrudniks_Sotrudniks_SotrudnikConnection(global::System.Collections.Generic.IReadOnlyList<global::client.IGetSotrudniks_Sotrudniks_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetSotrudniks_Sotrudniks_Nodes>? Nodes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSotrudniks_Sotrudniks_SotrudnikConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSotrudniks_Sotrudniks_SotrudnikConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniks_Sotrudniks_Nodes_Sotrudnik : global::System.IEquatable<GetSotrudniks_Sotrudniks_Nodes_Sotrudnik>, IGetSotrudniks_Sotrudniks_Nodes_Sotrudnik
    {
        public GetSotrudniks_Sotrudniks_Nodes_Sotrudnik(global::System.Int32 id, global::System.String last_Name, global::System.String name, global::System.String sur_Name, global::System.String phone, global::System.Int32 stage, global::System.String addres)
        {
            Id = id;
            Last_name = last_Name;
            Name = name;
            Sur_name = sur_Name;
            Phone = phone;
            Stage = stage;
            Addres = addres;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Last_name
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String Sur_name
        {
            get;
        }

        public global::System.String Phone
        {
            get;
        }

        public global::System.Int32 Stage
        {
            get;
        }

        public global::System.String Addres
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSotrudniks_Sotrudniks_Nodes_Sotrudnik? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Last_name.Equals(other.Last_name) && Name.Equals(other.Name) && Sur_name.Equals(other.Sur_name) && Phone.Equals(other.Phone) && Stage == other.Stage && Addres.Equals(other.Addres);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSotrudniks_Sotrudniks_Nodes_Sotrudnik)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Last_name.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Sur_name.GetHashCode();
                hash ^= 397 * Phone.GetHashCode();
                hash ^= 397 * Stage.GetHashCode();
                hash ^= 397 * Addres.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetSotrudniksResult
    {
        public global::client.IGetSotrudniks_Sotrudniks? Sotrudniks
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetSotrudniks_Sotrudniks
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::client.IGetSotrudniks_Sotrudniks_Nodes>? Nodes
        {
            get;
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetSotrudniks_Sotrudniks_SotrudnikConnection : IGetSotrudniks_Sotrudniks
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetSotrudniks_Sotrudniks_Nodes
    {
        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Last_name
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String Sur_name
        {
            get;
        }

        public global::System.String Phone
        {
            get;
        }

        public global::System.Int32 Stage
        {
            get;
        }

        public global::System.String Addres
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetSotrudniks_Sotrudniks_Nodes_Sotrudnik : IGetSotrudniks_Sotrudniks_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResult : global::System.IEquatable<RefreshTokenResult>, IRefreshTokenResult
    {
        public RefreshTokenResult(global::client.IRefreshToken_RefreshToken refreshToken)
        {
            RefreshToken = refreshToken;
        }

        public global::client.IRefreshToken_RefreshToken RefreshToken
        {
            get;
        }

        public virtual global::System.Boolean Equals(RefreshTokenResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RefreshToken.Equals(other.RefreshToken));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RefreshTokenResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RefreshToken.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshToken_RefreshToken_LoginPayload : global::System.IEquatable<RefreshToken_RefreshToken_LoginPayload>, IRefreshToken_RefreshToken_LoginPayload
    {
        public RefreshToken_RefreshToken_LoginPayload(global::client.IRefreshToken_RefreshToken_Token? token)
        {
            Token = token;
        }

        public global::client.IRefreshToken_RefreshToken_Token? Token
        {
            get;
        }

        public virtual global::System.Boolean Equals(RefreshToken_RefreshToken_LoginPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Token is null && other.Token is null) || Token != null && Token.Equals(other.Token)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RefreshToken_RefreshToken_LoginPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Token != null)
                {
                    hash ^= 397 * Token.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshToken_RefreshToken_Token_Token : global::System.IEquatable<RefreshToken_RefreshToken_Token_Token>, IRefreshToken_RefreshToken_Token_Token
    {
        public RefreshToken_RefreshToken_Token_Token(global::System.String refreshToken, global::System.String accessToken)
        {
            RefreshToken = refreshToken;
            AccessToken = accessToken;
        }

        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }

        public virtual global::System.Boolean Equals(RefreshToken_RefreshToken_Token_Token? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RefreshToken.Equals(other.RefreshToken)) && AccessToken.Equals(other.AccessToken);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RefreshToken_RefreshToken_Token_Token)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RefreshToken.GetHashCode();
                hash ^= 397 * AccessToken.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshTokenResult
    {
        public global::client.IRefreshToken_RefreshToken RefreshToken
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_RefreshToken
    {
        public global::client.IRefreshToken_RefreshToken_Token? Token
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_RefreshToken_LoginPayload : IRefreshToken_RefreshToken
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_RefreshToken_Token
    {
        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_RefreshToken_Token_Token : IRefreshToken_RefreshToken_Token
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInResult : global::System.IEquatable<SignInResult>, ISignInResult
    {
        public SignInResult(global::client.ISignIn_SignIn signIn)
        {
            SignIn = signIn;
        }

        public global::client.ISignIn_SignIn SignIn
        {
            get;
        }

        public virtual global::System.Boolean Equals(SignInResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SignIn.Equals(other.SignIn));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SignInResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SignIn.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignIn_SignIn_LoginPayload : global::System.IEquatable<SignIn_SignIn_LoginPayload>, ISignIn_SignIn_LoginPayload
    {
        public SignIn_SignIn_LoginPayload(global::client.ISignIn_SignIn_Token? token, global::System.Boolean? success, global::System.Collections.Generic.IReadOnlyList<global::client.ISignIn_SignIn_Errors>? errors)
        {
            Token = token;
            Success = success;
            Errors = errors;
        }

        public global::client.ISignIn_SignIn_Token? Token
        {
            get;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.ISignIn_SignIn_Errors>? Errors
        {
            get;
        }

        public virtual global::System.Boolean Equals(SignIn_SignIn_LoginPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Token is null && other.Token is null) || Token != null && Token.Equals(other.Token))) && Success == other.Success && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SignIn_SignIn_LoginPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Token != null)
                {
                    hash ^= 397 * Token.GetHashCode();
                }

                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (Errors != null)
                {
                    foreach (var Errors_elm in Errors)
                    {
                        hash ^= 397 * Errors_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignIn_SignIn_Token_Token : global::System.IEquatable<SignIn_SignIn_Token_Token>, ISignIn_SignIn_Token_Token
    {
        public SignIn_SignIn_Token_Token(global::System.String refreshToken, global::System.String accessToken)
        {
            RefreshToken = refreshToken;
            AccessToken = accessToken;
        }

        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }

        public virtual global::System.Boolean Equals(SignIn_SignIn_Token_Token? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RefreshToken.Equals(other.RefreshToken)) && AccessToken.Equals(other.AccessToken);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SignIn_SignIn_Token_Token)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RefreshToken.GetHashCode();
                hash ^= 397 * AccessToken.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignIn_SignIn_Errors_Error : global::System.IEquatable<SignIn_SignIn_Errors_Error>, ISignIn_SignIn_Errors_Error
    {
        public SignIn_SignIn_Errors_Error(global::System.String field, global::System.String info)
        {
            Field = field;
            Info = info;
        }

        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }

        public virtual global::System.Boolean Equals(SignIn_SignIn_Errors_Error? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Field.Equals(other.Field)) && Info.Equals(other.Info);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SignIn_SignIn_Errors_Error)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Field.GetHashCode();
                hash ^= 397 * Info.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignInResult
    {
        public global::client.ISignIn_SignIn SignIn
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn
    {
        public global::client.ISignIn_SignIn_Token? Token
        {
            get;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.ISignIn_SignIn_Errors>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_LoginPayload : ISignIn_SignIn
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_Token
    {
        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_Token_Token : ISignIn_SignIn_Token
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_Errors
    {
        public global::System.String Field
        {
            get;
        }

        public global::System.String Info
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignIn_SignIn_Errors_Error : ISignIn_SignIn_Errors
    {
    }

    /// <summary>
    /// Represents the operation service of the AddOrder GraphQL operation
    /// <code>
    /// mutation AddOrder($mesto: String!, $counts: Int!, $flightId: Int!, $clientId: Int!, $cardId: Int!) {
    ///   addOrder(mesto: $mesto, counts: $counts, flightId: $flightId, clientId: $clientId, cardId: $cardId) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderMutationDocument : global::StrawberryShake.IDocument
    {
        private AddOrderMutationDocument()
        {
        }

        public static AddOrderMutationDocument Instance
        {
            get;
        }

        = new AddOrderMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x28, 0x24, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x28, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x3a, 0x20, 0x24, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "9d2de8b76b58f291b9f8dffa43e6dbd1");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddOrder GraphQL operation
    /// <code>
    /// mutation AddOrder($mesto: String!, $counts: Int!, $flightId: Int!, $clientId: Int!, $cardId: Int!) {
    ///   addOrder(mesto: $mesto, counts: $counts, flightId: $flightId, clientId: $clientId, cardId: $cardId) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderMutation : global::client.IAddOrderMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddOrderResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public AddOrderMutation(global::StrawberryShake.IOperationExecutor<IAddOrderResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddOrderResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddOrderResult>> ExecuteAsync(global::System.String mesto, global::System.Int32 counts, global::System.Int32 flightId, global::System.Int32 clientId, global::System.Int32 cardId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(mesto, counts, flightId, clientId, cardId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddOrderResult>> Watch(global::System.String mesto, global::System.Int32 counts, global::System.Int32 flightId, global::System.Int32 clientId, global::System.Int32 cardId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(mesto, counts, flightId, clientId, cardId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String mesto, global::System.Int32 counts, global::System.Int32 flightId, global::System.Int32 clientId, global::System.Int32 cardId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("mesto", FormatMesto(mesto));
            variables.Add("counts", FormatCounts(counts));
            variables.Add("flightId", FormatFlightId(flightId));
            variables.Add("clientId", FormatClientId(clientId));
            variables.Add("cardId", FormatCardId(cardId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddOrderMutationDocument.Instance.Hash.Value, name: "AddOrder", document: AddOrderMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMesto(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatCounts(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatFlightId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatClientId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatCardId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddOrder GraphQL operation
    /// <code>
    /// mutation AddOrder($mesto: String!, $counts: Int!, $flightId: Int!, $clientId: Int!, $cardId: Int!) {
    ///   addOrder(mesto: $mesto, counts: $counts, flightId: $flightId, clientId: $clientId, cardId: $cardId) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddOrderMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddOrderResult>> ExecuteAsync(global::System.String mesto, global::System.Int32 counts, global::System.Int32 flightId, global::System.Int32 clientId, global::System.Int32 cardId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddOrderResult>> Watch(global::System.String mesto, global::System.Int32 counts, global::System.Int32 flightId, global::System.Int32 clientId, global::System.Int32 cardId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddRoute GraphQL operation
    /// <code>
    /// mutation AddRoute($start: String!, $target: String!, $time: Int!, $price: Decimal!) {
    ///   addRoute(start: $start, target: $target, time: $time, price: $price) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddRouteMutationDocument : global::StrawberryShake.IDocument
    {
        private AddRouteMutationDocument()
        {
        }

        public static AddRouteMutationDocument Instance
        {
            get;
        }

        = new AddRouteMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x28, 0x24, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x28, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x24, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2c, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "99784633867f31dd072596156888f5a2");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddRoute GraphQL operation
    /// <code>
    /// mutation AddRoute($start: String!, $target: String!, $time: Int!, $price: Decimal!) {
    ///   addRoute(start: $start, target: $target, time: $time, price: $price) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddRouteMutation : global::client.IAddRouteMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddRouteResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter;
        public AddRouteMutation(global::StrawberryShake.IOperationExecutor<IAddRouteResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddRouteResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddRouteResult>> ExecuteAsync(global::System.String start, global::System.String target, global::System.Int32 time, global::System.Decimal price, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(start, target, time, price);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddRouteResult>> Watch(global::System.String start, global::System.String target, global::System.Int32 time, global::System.Decimal price, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(start, target, time, price);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String start, global::System.String target, global::System.Int32 time, global::System.Decimal price)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("start", FormatStart(start));
            variables.Add("target", FormatTarget(target));
            variables.Add("time", FormatTime(time));
            variables.Add("price", FormatPrice(price));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddRouteMutationDocument.Instance.Hash.Value, name: "AddRoute", document: AddRouteMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatStart(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatTarget(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatTime(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatPrice(global::System.Decimal value)
        {
            return _decimalFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddRoute GraphQL operation
    /// <code>
    /// mutation AddRoute($start: String!, $target: String!, $time: Int!, $price: Decimal!) {
    ///   addRoute(start: $start, target: $target, time: $time, price: $price) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddRouteMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddRouteResult>> ExecuteAsync(global::System.String start, global::System.String target, global::System.Int32 time, global::System.Decimal price, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddRouteResult>> Watch(global::System.String start, global::System.String target, global::System.Int32 time, global::System.Decimal price, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddSotrudnik GraphQL operation
    /// <code>
    /// mutation AddSotrudnik($lastName: String!, $name: String!, $surName: String!, $addres: String!, $phone: String!, $stage: Int!) {
    ///   addSotrudnik(lastName: $lastName, name: $name, surName: $surName, addres: $addres, phone: $phone, stage: $stage) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddSotrudnikMutationDocument : global::StrawberryShake.IDocument
    {
        private AddSotrudnikMutationDocument()
        {
        }

        public static AddSotrudnikMutationDocument Instance
        {
            get;
        }

        = new AddSotrudnikMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x28, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x53, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x28, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x24, 0x73, 0x74, 0x61, 0x67, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "5004dcc93e3c49a3e6135af7600a58fa");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddSotrudnik GraphQL operation
    /// <code>
    /// mutation AddSotrudnik($lastName: String!, $name: String!, $surName: String!, $addres: String!, $phone: String!, $stage: Int!) {
    ///   addSotrudnik(lastName: $lastName, name: $name, surName: $surName, addres: $addres, phone: $phone, stage: $stage) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddSotrudnikMutation : global::client.IAddSotrudnikMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddSotrudnikResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public AddSotrudnikMutation(global::StrawberryShake.IOperationExecutor<IAddSotrudnikResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddSotrudnikResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddSotrudnikResult>> ExecuteAsync(global::System.String lastName, global::System.String name, global::System.String surName, global::System.String addres, global::System.String phone, global::System.Int32 stage, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(lastName, name, surName, addres, phone, stage);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddSotrudnikResult>> Watch(global::System.String lastName, global::System.String name, global::System.String surName, global::System.String addres, global::System.String phone, global::System.Int32 stage, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(lastName, name, surName, addres, phone, stage);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String lastName, global::System.String name, global::System.String surName, global::System.String addres, global::System.String phone, global::System.Int32 stage)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("lastName", FormatLastName(lastName));
            variables.Add("name", FormatName(name));
            variables.Add("surName", FormatSurName(surName));
            variables.Add("addres", FormatAddres(addres));
            variables.Add("phone", FormatPhone(phone));
            variables.Add("stage", FormatStage(stage));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddSotrudnikMutationDocument.Instance.Hash.Value, name: "AddSotrudnik", document: AddSotrudnikMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatLastName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatSurName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatAddres(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPhone(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatStage(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddSotrudnik GraphQL operation
    /// <code>
    /// mutation AddSotrudnik($lastName: String!, $name: String!, $surName: String!, $addres: String!, $phone: String!, $stage: Int!) {
    ///   addSotrudnik(lastName: $lastName, name: $name, surName: $surName, addres: $addres, phone: $phone, stage: $stage) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddSotrudnikMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddSotrudnikResult>> ExecuteAsync(global::System.String lastName, global::System.String name, global::System.String surName, global::System.String addres, global::System.String phone, global::System.Int32 stage, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddSotrudnikResult>> Watch(global::System.String lastName, global::System.String name, global::System.String surName, global::System.String addres, global::System.String phone, global::System.Int32 stage, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddAir GraphQL operation
    /// <code>
    /// mutation AddAir($bortNumber: String!, $models: String!, $lifeTime: Int!, $seats: Int!, $dateCreate: DateTime!, $isActive: Boolean!, $sotrudnikId: Int!) {
    ///   addAir(bortNumber: $bortNumber, models: $models, lifeTime: $lifeTime, seats: $seats, dateCreate: $dateCreate, isActive: $isActive, sotrudnikId: $sotrudnikId) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddAirMutationDocument : global::StrawberryShake.IDocument
    {
        private AddAirMutationDocument()
        {
        }

        public static AddAirMutationDocument Instance
        {
            get;
        }

        = new AddAirMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x41, 0x69, 0x72, 0x28, 0x24, 0x62, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x74, 0x73, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x21, 0x2c, 0x20, 0x24, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x41, 0x69, 0x72, 0x28, 0x62, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x62, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2c, 0x20, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x20, 0x73, 0x65, 0x61, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x74, 0x73, 0x2c, 0x20, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x24, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2c, 0x20, 0x73, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x73, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "04a4ef4c849dea1543400e45e89ab9bd");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddAir GraphQL operation
    /// <code>
    /// mutation AddAir($bortNumber: String!, $models: String!, $lifeTime: Int!, $seats: Int!, $dateCreate: DateTime!, $isActive: Boolean!, $sotrudnikId: Int!) {
    ///   addAir(bortNumber: $bortNumber, models: $models, lifeTime: $lifeTime, seats: $seats, dateCreate: $dateCreate, isActive: $isActive, sotrudnikId: $sotrudnikId) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddAirMutation : global::client.IAddAirMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddAirResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public AddAirMutation(global::StrawberryShake.IOperationExecutor<IAddAirResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddAirResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddAirResult>> ExecuteAsync(global::System.String bortNumber, global::System.String models, global::System.Int32 lifeTime, global::System.Int32 seats, global::System.DateTimeOffset dateCreate, global::System.Boolean isActive, global::System.Int32 sotrudnikId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(bortNumber, models, lifeTime, seats, dateCreate, isActive, sotrudnikId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddAirResult>> Watch(global::System.String bortNumber, global::System.String models, global::System.Int32 lifeTime, global::System.Int32 seats, global::System.DateTimeOffset dateCreate, global::System.Boolean isActive, global::System.Int32 sotrudnikId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(bortNumber, models, lifeTime, seats, dateCreate, isActive, sotrudnikId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String bortNumber, global::System.String models, global::System.Int32 lifeTime, global::System.Int32 seats, global::System.DateTimeOffset dateCreate, global::System.Boolean isActive, global::System.Int32 sotrudnikId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("bortNumber", FormatBortNumber(bortNumber));
            variables.Add("models", FormatModels(models));
            variables.Add("lifeTime", FormatLifeTime(lifeTime));
            variables.Add("seats", FormatSeats(seats));
            variables.Add("dateCreate", FormatDateCreate(dateCreate));
            variables.Add("isActive", FormatIsActive(isActive));
            variables.Add("sotrudnikId", FormatSotrudnikId(sotrudnikId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddAirMutationDocument.Instance.Hash.Value, name: "AddAir", document: AddAirMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatBortNumber(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatModels(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatLifeTime(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSeats(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatDateCreate(global::System.DateTimeOffset value)
        {
            return _dateTimeFormatter.Format(value);
        }

        private global::System.Object? FormatIsActive(global::System.Boolean value)
        {
            return _booleanFormatter.Format(value);
        }

        private global::System.Object? FormatSotrudnikId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddAir GraphQL operation
    /// <code>
    /// mutation AddAir($bortNumber: String!, $models: String!, $lifeTime: Int!, $seats: Int!, $dateCreate: DateTime!, $isActive: Boolean!, $sotrudnikId: Int!) {
    ///   addAir(bortNumber: $bortNumber, models: $models, lifeTime: $lifeTime, seats: $seats, dateCreate: $dateCreate, isActive: $isActive, sotrudnikId: $sotrudnikId) {
    ///     __typename
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddAirMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddAirResult>> ExecuteAsync(global::System.String bortNumber, global::System.String models, global::System.Int32 lifeTime, global::System.Int32 seats, global::System.DateTimeOffset dateCreate, global::System.Boolean isActive, global::System.Int32 sotrudnikId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddAirResult>> Watch(global::System.String bortNumber, global::System.String models, global::System.Int32 lifeTime, global::System.Int32 seats, global::System.DateTimeOffset dateCreate, global::System.Boolean isActive, global::System.Int32 sotrudnikId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAirs GraphQL operation
    /// <code>
    /// query GetAirs {
    ///   airs {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       bortNumber
    ///       model
    ///       date_create
    ///       lifeTime
    ///       isActive
    ///       seats
    ///       sotrudnik {
    ///         __typename
    ///         last_name
    ///         name
    ///         sur_name
    ///         ... on Sotrudnik {
    ///           id
    ///         }
    ///       }
    ///       ... on Air {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAirsQueryDocument()
        {
        }

        public static GetAirsQueryDocument Instance
        {
            get;
        }

        = new GetAirsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x61, 0x69, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x62, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x73, 0x65, 0x61, 0x74, 0x73, 0x20, 0x73, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x69, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "f96f78034ce4e27411d0f2c1b0cf257f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAirs GraphQL operation
    /// <code>
    /// query GetAirs {
    ///   airs {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       bortNumber
    ///       model
    ///       date_create
    ///       lifeTime
    ///       isActive
    ///       seats
    ///       sotrudnik {
    ///         __typename
    ///         last_name
    ///         name
    ///         sur_name
    ///         ... on Sotrudnik {
    ///           id
    ///         }
    ///       }
    ///       ... on Air {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirsQuery : global::client.IGetAirsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAirsResult> _operationExecutor;
        public GetAirsQuery(global::StrawberryShake.IOperationExecutor<IGetAirsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAirsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAirsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAirsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAirsQueryDocument.Instance.Hash.Value, name: "GetAirs", document: GetAirsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAirs GraphQL operation
    /// <code>
    /// query GetAirs {
    ///   airs {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       bortNumber
    ///       model
    ///       date_create
    ///       lifeTime
    ///       isActive
    ///       seats
    ///       sotrudnik {
    ///         __typename
    ///         last_name
    ///         name
    ///         sur_name
    ///         ... on Sotrudnik {
    ///           id
    ///         }
    ///       }
    ///       ... on Air {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetAirsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAirsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAirsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetClients GraphQL operation
    /// <code>
    /// query GetClients {
    ///   clients {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       lastName
    ///       name
    ///       surName
    ///       phone
    ///       addres
    ///       passportSeia
    ///       passportNumber
    ///       ... on Client {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClientsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetClientsQueryDocument()
        {
        }

        public static GetClientsQueryDocument Instance
        {
            get;
        }

        = new GetClientsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x69, 0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "b1533d80036b9cbe99340a30af9cd8ff");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetClients GraphQL operation
    /// <code>
    /// query GetClients {
    ///   clients {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       lastName
    ///       name
    ///       surName
    ///       phone
    ///       addres
    ///       passportSeia
    ///       passportNumber
    ///       ... on Client {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClientsQuery : global::client.IGetClientsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetClientsResult> _operationExecutor;
        public GetClientsQuery(global::StrawberryShake.IOperationExecutor<IGetClientsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetClientsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetClientsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetClientsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetClientsQueryDocument.Instance.Hash.Value, name: "GetClients", document: GetClientsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetClients GraphQL operation
    /// <code>
    /// query GetClients {
    ///   clients {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       lastName
    ///       name
    ///       surName
    ///       phone
    ///       addres
    ///       passportSeia
    ///       passportNumber
    ///       ... on Client {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetClientsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetClientsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetClientsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetFlights GraphQL operation
    /// <code>
    /// query GetFlights {
    ///   flights {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       dateStart
    ///       timeStart
    ///       isActive
    ///       route {
    ///         __typename
    ///         start
    ///         target
    ///         time
    ///         ... on Route {
    ///           id
    ///         }
    ///       }
    ///       air {
    ///         __typename
    ///         seats
    ///         ... on Air {
    ///           id
    ///         }
    ///       }
    ///       ... on Flight {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFlightsQueryDocument()
        {
        }

        public static GetFlightsQueryDocument Instance
        {
            get;
        }

        = new GetFlightsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x69, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x61, 0x74, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x69, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "8b807ea7fb2689b13f91d9c2048d44e5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFlights GraphQL operation
    /// <code>
    /// query GetFlights {
    ///   flights {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       dateStart
    ///       timeStart
    ///       isActive
    ///       route {
    ///         __typename
    ///         start
    ///         target
    ///         time
    ///         ... on Route {
    ///           id
    ///         }
    ///       }
    ///       air {
    ///         __typename
    ///         seats
    ///         ... on Air {
    ///           id
    ///         }
    ///       }
    ///       ... on Flight {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsQuery : global::client.IGetFlightsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFlightsResult> _operationExecutor;
        public GetFlightsQuery(global::StrawberryShake.IOperationExecutor<IGetFlightsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFlightsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFlightsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFlightsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFlightsQueryDocument.Instance.Hash.Value, name: "GetFlights", document: GetFlightsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFlights GraphQL operation
    /// <code>
    /// query GetFlights {
    ///   flights {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       dateStart
    ///       timeStart
    ///       isActive
    ///       route {
    ///         __typename
    ///         start
    ///         target
    ///         time
    ///         ... on Route {
    ///           id
    ///         }
    ///       }
    ///       air {
    ///         __typename
    ///         seats
    ///         ... on Air {
    ///           id
    ///         }
    ///       }
    ///       ... on Flight {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetFlightsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFlightsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFlightsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetOrders GraphQL operation
    /// <code>
    /// query GetOrders {
    ///   orders {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       mesto
    ///       counts
    ///       client {
    ///         __typename
    ///         lastName
    ///         name
    ///         surName
    ///         phone
    ///         passportNumber
    ///         passportSeia
    ///         ... on Client {
    ///           id
    ///         }
    ///       }
    ///       flight {
    ///         __typename
    ///         id
    ///         dateStart
    ///         timeStart
    ///         route {
    ///           __typename
    ///           start
    ///           target
    ///           time
    ///           price
    ///           ... on Route {
    ///             id
    ///           }
    ///         }
    ///         ... on Flight {
    ///           id
    ///         }
    ///       }
    ///       card {
    ///         __typename
    ///         name
    ///         ... on Card {
    ///           id
    ///         }
    ///       }
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetOrdersQueryDocument()
        {
        }

        public static GetOrdersQueryDocument Instance
        {
            get;
        }

        = new GetOrdersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x69, 0x61, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x63, 0x61, 0x72, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x61, 0x72, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "77335306595b0b4ad07221d872570a67");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetOrders GraphQL operation
    /// <code>
    /// query GetOrders {
    ///   orders {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       mesto
    ///       counts
    ///       client {
    ///         __typename
    ///         lastName
    ///         name
    ///         surName
    ///         phone
    ///         passportNumber
    ///         passportSeia
    ///         ... on Client {
    ///           id
    ///         }
    ///       }
    ///       flight {
    ///         __typename
    ///         id
    ///         dateStart
    ///         timeStart
    ///         route {
    ///           __typename
    ///           start
    ///           target
    ///           time
    ///           price
    ///           ... on Route {
    ///             id
    ///           }
    ///         }
    ///         ... on Flight {
    ///           id
    ///         }
    ///       }
    ///       card {
    ///         __typename
    ///         name
    ///         ... on Card {
    ///           id
    ///         }
    ///       }
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersQuery : global::client.IGetOrdersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetOrdersResult> _operationExecutor;
        public GetOrdersQuery(global::StrawberryShake.IOperationExecutor<IGetOrdersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetOrdersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetOrdersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetOrdersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetOrdersQueryDocument.Instance.Hash.Value, name: "GetOrders", document: GetOrdersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetOrders GraphQL operation
    /// <code>
    /// query GetOrders {
    ///   orders {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       mesto
    ///       counts
    ///       client {
    ///         __typename
    ///         lastName
    ///         name
    ///         surName
    ///         phone
    ///         passportNumber
    ///         passportSeia
    ///         ... on Client {
    ///           id
    ///         }
    ///       }
    ///       flight {
    ///         __typename
    ///         id
    ///         dateStart
    ///         timeStart
    ///         route {
    ///           __typename
    ///           start
    ///           target
    ///           time
    ///           price
    ///           ... on Route {
    ///             id
    ///           }
    ///         }
    ///         ... on Flight {
    ///           id
    ///         }
    ///       }
    ///       card {
    ///         __typename
    ///         name
    ///         ... on Card {
    ///           id
    ///         }
    ///       }
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetOrdersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetOrdersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetOrdersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetRoutes GraphQL operation
    /// <code>
    /// query GetRoutes {
    ///   routes {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       start
    ///       target
    ///       time
    ///       price
    ///       ... on Route {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetRoutesQueryDocument()
        {
        }

        public static GetRoutesQueryDocument Instance
        {
            get;
        }

        = new GetRoutesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "f6cce40b144a582a36699c5f70480bba");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRoutes GraphQL operation
    /// <code>
    /// query GetRoutes {
    ///   routes {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       start
    ///       target
    ///       time
    ///       price
    ///       ... on Route {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutesQuery : global::client.IGetRoutesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRoutesResult> _operationExecutor;
        public GetRoutesQuery(global::StrawberryShake.IOperationExecutor<IGetRoutesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRoutesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRoutesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRoutesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetRoutesQueryDocument.Instance.Hash.Value, name: "GetRoutes", document: GetRoutesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRoutes GraphQL operation
    /// <code>
    /// query GetRoutes {
    ///   routes {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       start
    ///       target
    ///       time
    ///       price
    ///       ... on Route {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetRoutesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRoutesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRoutesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSotrudniks GraphQL operation
    /// <code>
    /// query GetSotrudniks {
    ///   sotrudniks {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       last_name
    ///       name
    ///       sur_name
    ///       phone
    ///       stage
    ///       addres
    ///       ... on Sotrudnik {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniksQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSotrudniksQueryDocument()
        {
        }

        public static GetSotrudniksQueryDocument Instance
        {
            get;
        }

        = new GetSotrudniksQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x73, 0x20, 0x7b, 0x20, 0x73, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x6f, 0x74, 0x72, 0x75, 0x64, 0x6e, 0x69, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "8809142b27f4e2f3680841068435c994");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSotrudniks GraphQL operation
    /// <code>
    /// query GetSotrudniks {
    ///   sotrudniks {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       last_name
    ///       name
    ///       sur_name
    ///       phone
    ///       stage
    ///       addres
    ///       ... on Sotrudnik {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniksQuery : global::client.IGetSotrudniksQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSotrudniksResult> _operationExecutor;
        public GetSotrudniksQuery(global::StrawberryShake.IOperationExecutor<IGetSotrudniksResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSotrudniksResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSotrudniksResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSotrudniksResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSotrudniksQueryDocument.Instance.Hash.Value, name: "GetSotrudniks", document: GetSotrudniksQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSotrudniks GraphQL operation
    /// <code>
    /// query GetSotrudniks {
    ///   sotrudniks {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       last_name
    ///       name
    ///       sur_name
    ///       phone
    ///       stage
    ///       addres
    ///       ... on Sotrudnik {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetSotrudniksQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSotrudniksResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSotrudniksResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken($token: String!) {
    ///   refreshToken(refreshToken: $token) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenMutationDocument : global::StrawberryShake.IDocument
    {
        private RefreshTokenMutationDocument()
        {
        }

        public static RefreshTokenMutationDocument Instance
        {
            get;
        }

        = new RefreshTokenMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x28, 0x24, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x28, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "25b3a446ed30a78678937f5b3b1fe216");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken($token: String!) {
    ///   refreshToken(refreshToken: $token) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenMutation : global::client.IRefreshTokenMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRefreshTokenResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public RefreshTokenMutation(global::StrawberryShake.IOperationExecutor<IRefreshTokenResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRefreshTokenResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> ExecuteAsync(global::System.String token, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(token);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> Watch(global::System.String token, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(token);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String token)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("token", FormatToken(token));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RefreshTokenMutationDocument.Instance.Hash.Value, name: "RefreshToken", document: RefreshTokenMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatToken(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken($token: String!) {
    ///   refreshToken(refreshToken: $token) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshTokenMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> ExecuteAsync(global::System.String token, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> Watch(global::System.String token, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SignIn GraphQL operation
    /// <code>
    /// mutation SignIn($email: String!, $password: String!) {
    ///   signIn(email: $email, password: $password) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInMutationDocument : global::StrawberryShake.IDocument
    {
        private SignInMutationDocument()
        {
        }

        public static SignInMutationDocument Instance
        {
            get;
        }

        = new SignInMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x28, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x28, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "ee9f51d832f72fa7c258a1b97276da51");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SignIn GraphQL operation
    /// <code>
    /// mutation SignIn($email: String!, $password: String!) {
    ///   signIn(email: $email, password: $password) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInMutation : global::client.ISignInMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISignInResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public SignInMutation(global::StrawberryShake.IOperationExecutor<ISignInResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISignInResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISignInResult>> ExecuteAsync(global::System.String email, global::System.String password, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(email, password);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISignInResult>> Watch(global::System.String email, global::System.String password, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(email, password);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String email, global::System.String password)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("email", FormatEmail(email));
            variables.Add("password", FormatPassword(password));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SignInMutationDocument.Instance.Hash.Value, name: "SignIn", document: SignInMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPassword(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SignIn GraphQL operation
    /// <code>
    /// mutation SignIn($email: String!, $password: String!) {
    ///   signIn(email: $email, password: $password) {
    ///     __typename
    ///     token {
    ///       __typename
    ///       refreshToken
    ///       accessToken
    ///       ... on Token {
    ///         id
    ///       }
    ///     }
    ///     success
    ///     errors {
    ///       __typename
    ///       field
    ///       info
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISignInMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISignInResult>> ExecuteAsync(global::System.String email, global::System.String password, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISignInResult>> Watch(global::System.String email, global::System.String password, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GqlClient : global::client.IGqlClient
    {
        private readonly global::client.IAddOrderMutation _addOrder;
        private readonly global::client.IAddRouteMutation _addRoute;
        private readonly global::client.IAddSotrudnikMutation _addSotrudnik;
        private readonly global::client.IAddAirMutation _addAir;
        private readonly global::client.IGetAirsQuery _getAirs;
        private readonly global::client.IGetClientsQuery _getClients;
        private readonly global::client.IGetFlightsQuery _getFlights;
        private readonly global::client.IGetOrdersQuery _getOrders;
        private readonly global::client.IGetRoutesQuery _getRoutes;
        private readonly global::client.IGetSotrudniksQuery _getSotrudniks;
        private readonly global::client.IRefreshTokenMutation _refreshToken;
        private readonly global::client.ISignInMutation _signIn;
        public GqlClient(global::client.IAddOrderMutation addOrder, global::client.IAddRouteMutation addRoute, global::client.IAddSotrudnikMutation addSotrudnik, global::client.IAddAirMutation addAir, global::client.IGetAirsQuery getAirs, global::client.IGetClientsQuery getClients, global::client.IGetFlightsQuery getFlights, global::client.IGetOrdersQuery getOrders, global::client.IGetRoutesQuery getRoutes, global::client.IGetSotrudniksQuery getSotrudniks, global::client.IRefreshTokenMutation refreshToken, global::client.ISignInMutation signIn)
        {
            _addOrder = addOrder ?? throw new global::System.ArgumentNullException(nameof(addOrder));
            _addRoute = addRoute ?? throw new global::System.ArgumentNullException(nameof(addRoute));
            _addSotrudnik = addSotrudnik ?? throw new global::System.ArgumentNullException(nameof(addSotrudnik));
            _addAir = addAir ?? throw new global::System.ArgumentNullException(nameof(addAir));
            _getAirs = getAirs ?? throw new global::System.ArgumentNullException(nameof(getAirs));
            _getClients = getClients ?? throw new global::System.ArgumentNullException(nameof(getClients));
            _getFlights = getFlights ?? throw new global::System.ArgumentNullException(nameof(getFlights));
            _getOrders = getOrders ?? throw new global::System.ArgumentNullException(nameof(getOrders));
            _getRoutes = getRoutes ?? throw new global::System.ArgumentNullException(nameof(getRoutes));
            _getSotrudniks = getSotrudniks ?? throw new global::System.ArgumentNullException(nameof(getSotrudniks));
            _refreshToken = refreshToken ?? throw new global::System.ArgumentNullException(nameof(refreshToken));
            _signIn = signIn ?? throw new global::System.ArgumentNullException(nameof(signIn));
        }

        public static global::System.String ClientName => "GqlClient";
        public global::client.IAddOrderMutation AddOrder => _addOrder;
        public global::client.IAddRouteMutation AddRoute => _addRoute;
        public global::client.IAddSotrudnikMutation AddSotrudnik => _addSotrudnik;
        public global::client.IAddAirMutation AddAir => _addAir;
        public global::client.IGetAirsQuery GetAirs => _getAirs;
        public global::client.IGetClientsQuery GetClients => _getClients;
        public global::client.IGetFlightsQuery GetFlights => _getFlights;
        public global::client.IGetOrdersQuery GetOrders => _getOrders;
        public global::client.IGetRoutesQuery GetRoutes => _getRoutes;
        public global::client.IGetSotrudniksQuery GetSotrudniks => _getSotrudniks;
        public global::client.IRefreshTokenMutation RefreshToken => _refreshToken;
        public global::client.ISignInMutation SignIn => _signIn;
    }

    /// <summary>
    /// Represents the GqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGqlClient
    {
        global::client.IAddOrderMutation AddOrder
        {
            get;
        }

        global::client.IAddRouteMutation AddRoute
        {
            get;
        }

        global::client.IAddSotrudnikMutation AddSotrudnik
        {
            get;
        }

        global::client.IAddAirMutation AddAir
        {
            get;
        }

        global::client.IGetAirsQuery GetAirs
        {
            get;
        }

        global::client.IGetClientsQuery GetClients
        {
            get;
        }

        global::client.IGetFlightsQuery GetFlights
        {
            get;
        }

        global::client.IGetOrdersQuery GetOrders
        {
            get;
        }

        global::client.IGetRoutesQuery GetRoutes
        {
            get;
        }

        global::client.IGetSotrudniksQuery GetSotrudniks
        {
            get;
        }

        global::client.IRefreshTokenMutation RefreshToken
        {
            get;
        }

        global::client.ISignInMutation SignIn
        {
            get;
        }
    }
}

namespace client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AirEntity
    {
        public AirEntity(global::System.Int32 id = default !, global::System.String bortNumber = default !, global::System.String model = default !, global::System.DateTimeOffset date_Create = default !, global::System.Int32 lifeTime = default !, global::System.Boolean isActive = default !, global::System.Int32 seats = default !, global::StrawberryShake.EntityId sotrudnik = default !)
        {
            Id = id;
            BortNumber = bortNumber;
            Model = model;
            Date_create = date_Create;
            LifeTime = lifeTime;
            IsActive = isActive;
            Seats = seats;
            Sotrudnik = sotrudnik;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String BortNumber
        {
            get;
        }

        public global::System.String Model
        {
            get;
        }

        public global::System.DateTimeOffset Date_create
        {
            get;
        }

        public global::System.Int32 LifeTime
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::System.Int32 Seats
        {
            get;
        }

        public global::StrawberryShake.EntityId Sotrudnik
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SotrudnikEntity
    {
        public SotrudnikEntity(global::System.String last_Name = default !, global::System.String name = default !, global::System.String sur_Name = default !, global::System.Int32 id = default !, global::System.String phone = default !, global::System.Int32 stage = default !, global::System.String addres = default !)
        {
            Last_name = last_Name;
            Name = name;
            Sur_name = sur_Name;
            Id = id;
            Phone = phone;
            Stage = stage;
            Addres = addres;
        }

        public global::System.String Last_name
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String Sur_name
        {
            get;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Phone
        {
            get;
        }

        public global::System.Int32 Stage
        {
            get;
        }

        public global::System.String Addres
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ClientEntity
    {
        public ClientEntity(global::System.Int32 id = default !, global::System.String lastName = default !, global::System.String name = default !, global::System.String surName = default !, global::System.String phone = default !, global::System.String addres = default !, global::System.Int32 passportSeia = default !, global::System.Int32 passportNumber = default !)
        {
            Id = id;
            LastName = lastName;
            Name = name;
            SurName = surName;
            Phone = phone;
            Addres = addres;
            PassportSeia = passportSeia;
            PassportNumber = passportNumber;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String LastName
        {
            get;
        }

        public global::System.String Name
        {
            get;
        }

        public global::System.String SurName
        {
            get;
        }

        public global::System.String Phone
        {
            get;
        }

        public global::System.String Addres
        {
            get;
        }

        public global::System.Int32 PassportSeia
        {
            get;
        }

        public global::System.Int32 PassportNumber
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FlightEntity
    {
        public FlightEntity(global::System.Int32 id = default !, global::System.DateTimeOffset dateStart = default !, global::System.DateTimeOffset timeStart = default !, global::System.Boolean isActive = default !, global::StrawberryShake.EntityId route = default !, global::StrawberryShake.EntityId air = default !)
        {
            Id = id;
            DateStart = dateStart;
            TimeStart = timeStart;
            IsActive = isActive;
            Route = route;
            Air = air;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.DateTimeOffset DateStart
        {
            get;
        }

        public global::System.DateTimeOffset TimeStart
        {
            get;
        }

        public global::System.Boolean IsActive
        {
            get;
        }

        public global::StrawberryShake.EntityId Route
        {
            get;
        }

        public global::StrawberryShake.EntityId Air
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RouteEntity
    {
        public RouteEntity(global::System.String start = default !, global::System.String target = default !, global::System.Int32 time = default !, global::System.Decimal price = default !, global::System.Int32 id = default !)
        {
            Start = start;
            Target = target;
            Time = time;
            Price = price;
            Id = id;
        }

        public global::System.String Start
        {
            get;
        }

        public global::System.String Target
        {
            get;
        }

        public global::System.Int32 Time
        {
            get;
        }

        public global::System.Decimal Price
        {
            get;
        }

        public global::System.Int32 Id
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OrderEntity
    {
        public OrderEntity(global::System.Int32 id = default !, global::System.String mesto = default !, global::System.Int32 counts = default !, global::StrawberryShake.EntityId client = default !, global::StrawberryShake.EntityId flight = default !, global::StrawberryShake.EntityId card = default !)
        {
            Id = id;
            Mesto = mesto;
            Counts = counts;
            Client = client;
            Flight = flight;
            Card = card;
        }

        public global::System.Int32 Id
        {
            get;
        }

        public global::System.String Mesto
        {
            get;
        }

        public global::System.Int32 Counts
        {
            get;
        }

        public global::StrawberryShake.EntityId Client
        {
            get;
        }

        public global::StrawberryShake.EntityId Flight
        {
            get;
        }

        public global::StrawberryShake.EntityId Card
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CardEntity
    {
        public CardEntity(global::System.String name = default !)
        {
            Name = name;
        }

        public global::System.String Name
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class TokenEntity
    {
        public TokenEntity(global::System.String refreshToken = default !, global::System.String accessToken = default !)
        {
            RefreshToken = refreshToken;
            AccessToken = accessToken;
        }

        public global::System.String RefreshToken
        {
            get;
        }

        public global::System.String AccessToken
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.AddOrderResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddOrderResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IAddOrderResult);
        public AddOrderResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddOrderResultInfo info)
            {
                return new AddOrderResult(MapNonNullableIAddOrder_AddOrder(info.AddOrder, snapshot));
            }

            throw new global::System.ArgumentException("AddOrderResultInfo expected.");
        }

        private global::client.IAddOrder_AddOrder MapNonNullableIAddOrder_AddOrder(global::client.State.PayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddOrder_AddOrder returnValue = default !;
            if (data.__typename.Equals("Payload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddOrder_AddOrder_Payload(data.Success, MapIAddOrder_AddOrder_ErrorsNonNullableArray(data.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IAddOrder_AddOrder_Errors>? MapIAddOrder_AddOrder_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.IAddOrder_AddOrder_Errors>();
            foreach (global::client.State.ErrorData child in list)
            {
                errors.Add(MapNonNullableIAddOrder_AddOrder_Errors(child, snapshot));
            }

            return errors;
        }

        private global::client.IAddOrder_AddOrder_Errors MapNonNullableIAddOrder_AddOrder_Errors(global::client.State.ErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddOrder_AddOrder_Errors returnValue = default !;
            if (data.__typename.Equals("Error", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddOrder_AddOrder_Errors_Error(data.Field ?? throw new global::System.ArgumentNullException(), data.Info ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddOrderResultInfo(global::client.State.PayloadData addOrder, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddOrder = addOrder;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.PayloadData AddOrder
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddOrderResultInfo(AddOrder, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddRouteResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.AddRouteResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddRouteResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IAddRouteResult);
        public AddRouteResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddRouteResultInfo info)
            {
                return new AddRouteResult(MapNonNullableIAddRoute_AddRoute(info.AddRoute, snapshot));
            }

            throw new global::System.ArgumentException("AddRouteResultInfo expected.");
        }

        private global::client.IAddRoute_AddRoute MapNonNullableIAddRoute_AddRoute(global::client.State.PayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddRoute_AddRoute returnValue = default !;
            if (data.__typename.Equals("Payload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddRoute_AddRoute_Payload(data.Success, MapIAddRoute_AddRoute_ErrorsNonNullableArray(data.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IAddRoute_AddRoute_Errors>? MapIAddRoute_AddRoute_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.IAddRoute_AddRoute_Errors>();
            foreach (global::client.State.ErrorData child in list)
            {
                errors.Add(MapNonNullableIAddRoute_AddRoute_Errors(child, snapshot));
            }

            return errors;
        }

        private global::client.IAddRoute_AddRoute_Errors MapNonNullableIAddRoute_AddRoute_Errors(global::client.State.ErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddRoute_AddRoute_Errors returnValue = default !;
            if (data.__typename.Equals("Error", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddRoute_AddRoute_Errors_Error(data.Field ?? throw new global::System.ArgumentNullException(), data.Info ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddRouteResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddRouteResultInfo(global::client.State.PayloadData addRoute, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddRoute = addRoute;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.PayloadData AddRoute
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddRouteResultInfo(AddRoute, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddSotrudnikResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.AddSotrudnikResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddSotrudnikResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IAddSotrudnikResult);
        public AddSotrudnikResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddSotrudnikResultInfo info)
            {
                return new AddSotrudnikResult(MapNonNullableIAddSotrudnik_AddSotrudnik(info.AddSotrudnik, snapshot));
            }

            throw new global::System.ArgumentException("AddSotrudnikResultInfo expected.");
        }

        private global::client.IAddSotrudnik_AddSotrudnik MapNonNullableIAddSotrudnik_AddSotrudnik(global::client.State.PayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddSotrudnik_AddSotrudnik returnValue = default !;
            if (data.__typename.Equals("Payload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddSotrudnik_AddSotrudnik_Payload(data.Success, MapIAddSotrudnik_AddSotrudnik_ErrorsNonNullableArray(data.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IAddSotrudnik_AddSotrudnik_Errors>? MapIAddSotrudnik_AddSotrudnik_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.IAddSotrudnik_AddSotrudnik_Errors>();
            foreach (global::client.State.ErrorData child in list)
            {
                errors.Add(MapNonNullableIAddSotrudnik_AddSotrudnik_Errors(child, snapshot));
            }

            return errors;
        }

        private global::client.IAddSotrudnik_AddSotrudnik_Errors MapNonNullableIAddSotrudnik_AddSotrudnik_Errors(global::client.State.ErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddSotrudnik_AddSotrudnik_Errors returnValue = default !;
            if (data.__typename.Equals("Error", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddSotrudnik_AddSotrudnik_Errors_Error(data.Field ?? throw new global::System.ArgumentNullException(), data.Info ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddSotrudnikResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddSotrudnikResultInfo(global::client.State.PayloadData addSotrudnik, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddSotrudnik = addSotrudnik;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.PayloadData AddSotrudnik
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddSotrudnikResultInfo(AddSotrudnik, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddAirResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.AddAirResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddAirResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IAddAirResult);
        public AddAirResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddAirResultInfo info)
            {
                return new AddAirResult(MapNonNullableIAddAir_AddAir(info.AddAir, snapshot));
            }

            throw new global::System.ArgumentException("AddAirResultInfo expected.");
        }

        private global::client.IAddAir_AddAir MapNonNullableIAddAir_AddAir(global::client.State.PayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddAir_AddAir returnValue = default !;
            if (data.__typename.Equals("Payload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddAir_AddAir_Payload(data.Success, MapIAddAir_AddAir_ErrorsNonNullableArray(data.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IAddAir_AddAir_Errors>? MapIAddAir_AddAir_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.IAddAir_AddAir_Errors>();
            foreach (global::client.State.ErrorData child in list)
            {
                errors.Add(MapNonNullableIAddAir_AddAir_Errors(child, snapshot));
            }

            return errors;
        }

        private global::client.IAddAir_AddAir_Errors MapNonNullableIAddAir_AddAir_Errors(global::client.State.ErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddAir_AddAir_Errors returnValue = default !;
            if (data.__typename.Equals("Error", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddAir_AddAir_Errors_Error(data.Field ?? throw new global::System.ArgumentNullException(), data.Info ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddAirResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddAirResultInfo(global::client.State.PayloadData addAir, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddAir = addAir;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.PayloadData AddAir
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddAirResultInfo(AddAir, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.GetAirsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetAirs_Airs_Nodes_Air> _getAirs_Airs_Nodes_AirFromAirEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik> _getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper;
        public GetAirsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetAirs_Airs_Nodes_Air> getAirs_Airs_Nodes_AirFromAirEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik> getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAirs_Airs_Nodes_AirFromAirEntityMapper = getAirs_Airs_Nodes_AirFromAirEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAirs_Airs_Nodes_AirFromAirEntityMapper));
            _getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper = getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IGetAirsResult);
        public GetAirsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAirsResultInfo info)
            {
                return new GetAirsResult(MapIGetAirs_Airs(info.Airs, snapshot));
            }

            throw new global::System.ArgumentException("GetAirsResultInfo expected.");
        }

        private global::client.IGetAirs_Airs? MapIGetAirs_Airs(global::client.State.AirConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAirs_Airs returnValue = default !;
            if (data?.__typename.Equals("AirConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAirs_Airs_AirConnection(MapIGetAirs_Airs_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IGetAirs_Airs_Nodes>? MapIGetAirs_Airs_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var airs = new global::System.Collections.Generic.List<global::client.IGetAirs_Airs_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                airs.Add(MapNonNullableIGetAirs_Airs_Nodes(child, snapshot));
            }

            return airs;
        }

        private global::client.IGetAirs_Airs_Nodes MapNonNullableIGetAirs_Airs_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Air", global::System.StringComparison.Ordinal))
            {
                return _getAirs_Airs_Nodes_AirFromAirEntityMapper.Map(snapshot.GetEntity<global::client.State.AirEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetAirs_Airs_Nodes_Sotrudnik MapNonNullableIGetAirs_Airs_Nodes_Sotrudnik(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Sotrudnik", global::System.StringComparison.Ordinal))
            {
                return _getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper.Map(snapshot.GetEntity<global::client.State.SotrudnikEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAirsResultInfo(global::client.State.AirConnectionData? airs, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Airs = airs;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.AirConnectionData? Airs
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAirsResultInfo(Airs, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirs_Airs_Nodes_AirFromAirEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetAirs_Airs_Nodes_Air>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik> _getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper;
        public GetAirs_Airs_Nodes_AirFromAirEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik> getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper = getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper));
        }

        public GetAirs_Airs_Nodes_Air Map(global::client.State.AirEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAirs_Airs_Nodes_Air(entity.Id, entity.BortNumber, entity.Model, entity.Date_create, entity.LifeTime, entity.IsActive, entity.Seats, MapNonNullableIGetAirs_Airs_Nodes_Sotrudnik(entity.Sotrudnik, snapshot));
        }

        private global::client.IGetAirs_Airs_Nodes_Sotrudnik MapNonNullableIGetAirs_Airs_Nodes_Sotrudnik(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Sotrudnik", global::System.StringComparison.Ordinal))
            {
                return _getAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper.Map(snapshot.GetEntity<global::client.State.SotrudnikEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik Map(global::client.State.SotrudnikEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik(entity.Last_name, entity.Name, entity.Sur_name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClientsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.GetClientsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetClients_Clients_Nodes_Client> _getClients_Clients_Nodes_ClientFromClientEntityMapper;
        public GetClientsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetClients_Clients_Nodes_Client> getClients_Clients_Nodes_ClientFromClientEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getClients_Clients_Nodes_ClientFromClientEntityMapper = getClients_Clients_Nodes_ClientFromClientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getClients_Clients_Nodes_ClientFromClientEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IGetClientsResult);
        public GetClientsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetClientsResultInfo info)
            {
                return new GetClientsResult(MapIGetClients_Clients(info.Clients, snapshot));
            }

            throw new global::System.ArgumentException("GetClientsResultInfo expected.");
        }

        private global::client.IGetClients_Clients? MapIGetClients_Clients(global::client.State.ClientConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetClients_Clients returnValue = default !;
            if (data?.__typename.Equals("ClientConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetClients_Clients_ClientConnection(MapIGetClients_Clients_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IGetClients_Clients_Nodes>? MapIGetClients_Clients_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var clients = new global::System.Collections.Generic.List<global::client.IGetClients_Clients_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                clients.Add(MapNonNullableIGetClients_Clients_Nodes(child, snapshot));
            }

            return clients;
        }

        private global::client.IGetClients_Clients_Nodes MapNonNullableIGetClients_Clients_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Client", global::System.StringComparison.Ordinal))
            {
                return _getClients_Clients_Nodes_ClientFromClientEntityMapper.Map(snapshot.GetEntity<global::client.State.ClientEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClientsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetClientsResultInfo(global::client.State.ClientConnectionData? clients, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Clients = clients;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.ClientConnectionData? Clients
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetClientsResultInfo(Clients, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClients_Clients_Nodes_ClientFromClientEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetClients_Clients_Nodes_Client>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetClients_Clients_Nodes_ClientFromClientEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetClients_Clients_Nodes_Client Map(global::client.State.ClientEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetClients_Clients_Nodes_Client(entity.Id, entity.LastName, entity.Name, entity.SurName, entity.Phone, entity.Addres, entity.PassportSeia, entity.PassportNumber);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.GetFlightsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetFlights_Flights_Nodes_Flight> _getFlights_Flights_Nodes_FlightFromFlightEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route> _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air> _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper;
        public GetFlightsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetFlights_Flights_Nodes_Flight> getFlights_Flights_Nodes_FlightFromFlightEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route> getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air> getFlights_Flights_Nodes_Air_AirFromAirEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFlights_Flights_Nodes_FlightFromFlightEntityMapper = getFlights_Flights_Nodes_FlightFromFlightEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_FlightFromFlightEntityMapper));
            _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper = getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper));
            _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper = getFlights_Flights_Nodes_Air_AirFromAirEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_Air_AirFromAirEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IGetFlightsResult);
        public GetFlightsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFlightsResultInfo info)
            {
                return new GetFlightsResult(MapIGetFlights_Flights(info.Flights, snapshot));
            }

            throw new global::System.ArgumentException("GetFlightsResultInfo expected.");
        }

        private global::client.IGetFlights_Flights? MapIGetFlights_Flights(global::client.State.FlightConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFlights_Flights returnValue = default !;
            if (data?.__typename.Equals("FlightConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFlights_Flights_FlightConnection(MapIGetFlights_Flights_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IGetFlights_Flights_Nodes>? MapIGetFlights_Flights_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var flights = new global::System.Collections.Generic.List<global::client.IGetFlights_Flights_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                flights.Add(MapNonNullableIGetFlights_Flights_Nodes(child, snapshot));
            }

            return flights;
        }

        private global::client.IGetFlights_Flights_Nodes MapNonNullableIGetFlights_Flights_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_FlightFromFlightEntityMapper.Map(snapshot.GetEntity<global::client.State.FlightEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetFlights_Flights_Nodes_Route MapNonNullableIGetFlights_Flights_Nodes_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetFlights_Flights_Nodes_Air MapNonNullableIGetFlights_Flights_Nodes_Air(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Air", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper.Map(snapshot.GetEntity<global::client.State.AirEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFlightsResultInfo(global::client.State.FlightConnectionData? flights, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Flights = flights;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.FlightConnectionData? Flights
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFlightsResultInfo(Flights, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_FlightFromFlightEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetFlights_Flights_Nodes_Flight>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route> _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air> _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper;
        public GetFlights_Flights_Nodes_FlightFromFlightEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route> getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air> getFlights_Flights_Nodes_Air_AirFromAirEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper = getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper));
            _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper = getFlights_Flights_Nodes_Air_AirFromAirEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlights_Flights_Nodes_Air_AirFromAirEntityMapper));
        }

        public GetFlights_Flights_Nodes_Flight Map(global::client.State.FlightEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFlights_Flights_Nodes_Flight(entity.Id, entity.DateStart, entity.TimeStart, entity.IsActive, MapNonNullableIGetFlights_Flights_Nodes_Route(entity.Route, snapshot), MapNonNullableIGetFlights_Flights_Nodes_Air(entity.Air, snapshot));
        }

        private global::client.IGetFlights_Flights_Nodes_Route MapNonNullableIGetFlights_Flights_Nodes_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetFlights_Flights_Nodes_Air MapNonNullableIGetFlights_Flights_Nodes_Air(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Air", global::System.StringComparison.Ordinal))
            {
                return _getFlights_Flights_Nodes_Air_AirFromAirEntityMapper.Map(snapshot.GetEntity<global::client.State.AirEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetFlights_Flights_Nodes_Route_Route>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFlights_Flights_Nodes_Route_Route Map(global::client.State.RouteEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFlights_Flights_Nodes_Route_Route(entity.Start, entity.Target, entity.Time);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlights_Flights_Nodes_Air_AirFromAirEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, GetFlights_Flights_Nodes_Air_Air>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFlights_Flights_Nodes_Air_AirFromAirEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFlights_Flights_Nodes_Air_Air Map(global::client.State.AirEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFlights_Flights_Nodes_Air_Air(entity.Seats);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.GetOrdersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.OrderEntity, GetOrders_Orders_Nodes_Order> _getOrders_Orders_Nodes_OrderFromOrderEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client> _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight> _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.CardEntity, GetOrders_Orders_Nodes_Card_Card> _getOrders_Orders_Nodes_Card_CardFromCardEntityMapper;
        public GetOrdersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.OrderEntity, GetOrders_Orders_Nodes_Order> getOrders_Orders_Nodes_OrderFromOrderEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client> getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight> getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.CardEntity, GetOrders_Orders_Nodes_Card_Card> getOrders_Orders_Nodes_Card_CardFromCardEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getOrders_Orders_Nodes_OrderFromOrderEntityMapper = getOrders_Orders_Nodes_OrderFromOrderEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_OrderFromOrderEntityMapper));
            _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper = getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper));
            _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper = getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper));
            _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper = getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper));
            _getOrders_Orders_Nodes_Card_CardFromCardEntityMapper = getOrders_Orders_Nodes_Card_CardFromCardEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Card_CardFromCardEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IGetOrdersResult);
        public GetOrdersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetOrdersResultInfo info)
            {
                return new GetOrdersResult(MapIGetOrders_Orders(info.Orders, snapshot));
            }

            throw new global::System.ArgumentException("GetOrdersResultInfo expected.");
        }

        private global::client.IGetOrders_Orders? MapIGetOrders_Orders(global::client.State.OrderConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetOrders_Orders returnValue = default !;
            if (data?.__typename.Equals("OrderConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetOrders_Orders_OrderConnection(MapIGetOrders_Orders_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IGetOrders_Orders_Nodes>? MapIGetOrders_Orders_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var orders = new global::System.Collections.Generic.List<global::client.IGetOrders_Orders_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                orders.Add(MapNonNullableIGetOrders_Orders_Nodes(child, snapshot));
            }

            return orders;
        }

        private global::client.IGetOrders_Orders_Nodes MapNonNullableIGetOrders_Orders_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_OrderFromOrderEntityMapper.Map(snapshot.GetEntity<global::client.State.OrderEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Client MapNonNullableIGetOrders_Orders_Nodes_Client(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Client", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper.Map(snapshot.GetEntity<global::client.State.ClientEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Flight MapNonNullableIGetOrders_Orders_Nodes_Flight(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper.Map(snapshot.GetEntity<global::client.State.FlightEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Flight_Route MapNonNullableIGetOrders_Orders_Nodes_Flight_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Card MapNonNullableIGetOrders_Orders_Nodes_Card(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Card", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Card_CardFromCardEntityMapper.Map(snapshot.GetEntity<global::client.State.CardEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetOrdersResultInfo(global::client.State.OrderConnectionData? orders, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Orders = orders;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.OrderConnectionData? Orders
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetOrdersResultInfo(Orders, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_OrderFromOrderEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.OrderEntity, GetOrders_Orders_Nodes_Order>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client> _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight> _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.CardEntity, GetOrders_Orders_Nodes_Card_Card> _getOrders_Orders_Nodes_Card_CardFromCardEntityMapper;
        public GetOrders_Orders_Nodes_OrderFromOrderEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client> getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight> getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper, global::StrawberryShake.IEntityMapper<global::client.State.CardEntity, GetOrders_Orders_Nodes_Card_Card> getOrders_Orders_Nodes_Card_CardFromCardEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper = getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper));
            _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper = getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper));
            _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper = getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper));
            _getOrders_Orders_Nodes_Card_CardFromCardEntityMapper = getOrders_Orders_Nodes_Card_CardFromCardEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Card_CardFromCardEntityMapper));
        }

        public GetOrders_Orders_Nodes_Order Map(global::client.State.OrderEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Order(entity.Id, entity.Mesto, entity.Counts, MapNonNullableIGetOrders_Orders_Nodes_Client(entity.Client, snapshot), MapNonNullableIGetOrders_Orders_Nodes_Flight(entity.Flight, snapshot), MapNonNullableIGetOrders_Orders_Nodes_Card(entity.Card, snapshot));
        }

        private global::client.IGetOrders_Orders_Nodes_Client MapNonNullableIGetOrders_Orders_Nodes_Client(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Client", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Client_ClientFromClientEntityMapper.Map(snapshot.GetEntity<global::client.State.ClientEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Flight MapNonNullableIGetOrders_Orders_Nodes_Flight(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper.Map(snapshot.GetEntity<global::client.State.FlightEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Flight_Route MapNonNullableIGetOrders_Orders_Nodes_Flight_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::client.IGetOrders_Orders_Nodes_Card MapNonNullableIGetOrders_Orders_Nodes_Card(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Card", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Card_CardFromCardEntityMapper.Map(snapshot.GetEntity<global::client.State.CardEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Client_ClientFromClientEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, GetOrders_Orders_Nodes_Client_Client>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetOrders_Orders_Nodes_Client_ClientFromClientEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetOrders_Orders_Nodes_Client_Client Map(global::client.State.ClientEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Client_Client(entity.LastName, entity.Name, entity.SurName, entity.Phone, entity.PassportNumber, entity.PassportSeia);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, GetOrders_Orders_Nodes_Flight_Flight>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper;
        public GetOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route> getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper = getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper));
        }

        public GetOrders_Orders_Nodes_Flight_Flight Map(global::client.State.FlightEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Flight_Flight(entity.Id, entity.DateStart, entity.TimeStart, MapNonNullableIGetOrders_Orders_Nodes_Flight_Route(entity.Route, snapshot));
        }

        private global::client.IGetOrders_Orders_Nodes_Flight_Route MapNonNullableIGetOrders_Orders_Nodes_Flight_Route(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Card_CardFromCardEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.CardEntity, GetOrders_Orders_Nodes_Card_Card>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetOrders_Orders_Nodes_Card_CardFromCardEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetOrders_Orders_Nodes_Card_Card Map(global::client.State.CardEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Card_Card(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetOrders_Orders_Nodes_Flight_Route_Route>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetOrders_Orders_Nodes_Flight_Route_Route Map(global::client.State.RouteEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrders_Orders_Nodes_Flight_Route_Route(entity.Start, entity.Target, entity.Time, entity.Price);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.GetRoutesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetRoutes_Routes_Nodes_Route> _getRoutes_Routes_Nodes_RouteFromRouteEntityMapper;
        public GetRoutesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetRoutes_Routes_Nodes_Route> getRoutes_Routes_Nodes_RouteFromRouteEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRoutes_Routes_Nodes_RouteFromRouteEntityMapper = getRoutes_Routes_Nodes_RouteFromRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRoutes_Routes_Nodes_RouteFromRouteEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IGetRoutesResult);
        public GetRoutesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRoutesResultInfo info)
            {
                return new GetRoutesResult(MapIGetRoutes_Routes(info.Routes, snapshot));
            }

            throw new global::System.ArgumentException("GetRoutesResultInfo expected.");
        }

        private global::client.IGetRoutes_Routes? MapIGetRoutes_Routes(global::client.State.RouteConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRoutes_Routes returnValue = default !;
            if (data?.__typename.Equals("RouteConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRoutes_Routes_RouteConnection(MapIGetRoutes_Routes_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IGetRoutes_Routes_Nodes>? MapIGetRoutes_Routes_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var routes = new global::System.Collections.Generic.List<global::client.IGetRoutes_Routes_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                routes.Add(MapNonNullableIGetRoutes_Routes_Nodes(child, snapshot));
            }

            return routes;
        }

        private global::client.IGetRoutes_Routes_Nodes MapNonNullableIGetRoutes_Routes_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                return _getRoutes_Routes_Nodes_RouteFromRouteEntityMapper.Map(snapshot.GetEntity<global::client.State.RouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetRoutesResultInfo(global::client.State.RouteConnectionData? routes, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Routes = routes;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.RouteConnectionData? Routes
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRoutesResultInfo(Routes, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutes_Routes_Nodes_RouteFromRouteEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, GetRoutes_Routes_Nodes_Route>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRoutes_Routes_Nodes_RouteFromRouteEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRoutes_Routes_Nodes_Route Map(global::client.State.RouteEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRoutes_Routes_Nodes_Route(entity.Id, entity.Start, entity.Target, entity.Time, entity.Price);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniksResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.GetSotrudniksResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, GetSotrudniks_Sotrudniks_Nodes_Sotrudnik> _getSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper;
        public GetSotrudniksResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, GetSotrudniks_Sotrudniks_Nodes_Sotrudnik> getSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper = getSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IGetSotrudniksResult);
        public GetSotrudniksResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSotrudniksResultInfo info)
            {
                return new GetSotrudniksResult(MapIGetSotrudniks_Sotrudniks(info.Sotrudniks, snapshot));
            }

            throw new global::System.ArgumentException("GetSotrudniksResultInfo expected.");
        }

        private global::client.IGetSotrudniks_Sotrudniks? MapIGetSotrudniks_Sotrudniks(global::client.State.SotrudnikConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSotrudniks_Sotrudniks returnValue = default !;
            if (data?.__typename.Equals("SotrudnikConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSotrudniks_Sotrudniks_SotrudnikConnection(MapIGetSotrudniks_Sotrudniks_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.IGetSotrudniks_Sotrudniks_Nodes>? MapIGetSotrudniks_Sotrudniks_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var sotrudniks = new global::System.Collections.Generic.List<global::client.IGetSotrudniks_Sotrudniks_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                sotrudniks.Add(MapNonNullableIGetSotrudniks_Sotrudniks_Nodes(child, snapshot));
            }

            return sotrudniks;
        }

        private global::client.IGetSotrudniks_Sotrudniks_Nodes MapNonNullableIGetSotrudniks_Sotrudniks_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Sotrudnik", global::System.StringComparison.Ordinal))
            {
                return _getSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper.Map(snapshot.GetEntity<global::client.State.SotrudnikEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniksResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSotrudniksResultInfo(global::client.State.SotrudnikConnectionData? sotrudniks, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Sotrudniks = sotrudniks;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.SotrudnikConnectionData? Sotrudniks
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSotrudniksResultInfo(Sotrudniks, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, GetSotrudniks_Sotrudniks_Nodes_Sotrudnik>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSotrudniks_Sotrudniks_Nodes_Sotrudnik Map(global::client.State.SotrudnikEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSotrudniks_Sotrudniks_Nodes_Sotrudnik(entity.Id, entity.Last_name, entity.Name, entity.Sur_name, entity.Phone, entity.Stage, entity.Addres);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.RefreshTokenResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, RefreshToken_RefreshToken_Token_Token> _refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper;
        public RefreshTokenResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, RefreshToken_RefreshToken_Token_Token> refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper = refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper ?? throw new global::System.ArgumentNullException(nameof(refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.IRefreshTokenResult);
        public RefreshTokenResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RefreshTokenResultInfo info)
            {
                return new RefreshTokenResult(MapNonNullableIRefreshToken_RefreshToken(info.RefreshToken, snapshot));
            }

            throw new global::System.ArgumentException("RefreshTokenResultInfo expected.");
        }

        private global::client.IRefreshToken_RefreshToken MapNonNullableIRefreshToken_RefreshToken(global::client.State.LoginPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IRefreshToken_RefreshToken returnValue = default !;
            if (data.__typename.Equals("LoginPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new RefreshToken_RefreshToken_LoginPayload(MapIRefreshToken_RefreshToken_Token(data.Token, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::client.IRefreshToken_RefreshToken_Token? MapIRefreshToken_RefreshToken_Token(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Token", global::System.StringComparison.Ordinal))
            {
                return _refreshToken_RefreshToken_Token_TokenFromTokenEntityMapper.Map(snapshot.GetEntity<global::client.State.TokenEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RefreshTokenResultInfo(global::client.State.LoginPayloadData refreshToken, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RefreshToken = refreshToken;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.LoginPayloadData RefreshToken
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RefreshTokenResultInfo(RefreshToken, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshToken_RefreshToken_Token_TokenFromTokenEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, RefreshToken_RefreshToken_Token_Token>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RefreshToken_RefreshToken_Token_TokenFromTokenEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public RefreshToken_RefreshToken_Token_Token Map(global::client.State.TokenEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new RefreshToken_RefreshToken_Token_Token(entity.RefreshToken, entity.AccessToken);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::client.SignInResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, SignIn_SignIn_Token_Token> _signIn_SignIn_Token_TokenFromTokenEntityMapper;
        public SignInResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, SignIn_SignIn_Token_Token> signIn_SignIn_Token_TokenFromTokenEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _signIn_SignIn_Token_TokenFromTokenEntityMapper = signIn_SignIn_Token_TokenFromTokenEntityMapper ?? throw new global::System.ArgumentNullException(nameof(signIn_SignIn_Token_TokenFromTokenEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::client.ISignInResult);
        public SignInResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SignInResultInfo info)
            {
                return new SignInResult(MapNonNullableISignIn_SignIn(info.SignIn, snapshot));
            }

            throw new global::System.ArgumentException("SignInResultInfo expected.");
        }

        private global::client.ISignIn_SignIn MapNonNullableISignIn_SignIn(global::client.State.LoginPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISignIn_SignIn returnValue = default !;
            if (data.__typename.Equals("LoginPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new SignIn_SignIn_LoginPayload(MapISignIn_SignIn_Token(data.Token, snapshot), data.Success, MapISignIn_SignIn_ErrorsNonNullableArray(data.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::client.ISignIn_SignIn_Token? MapISignIn_SignIn_Token(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Token", global::System.StringComparison.Ordinal))
            {
                return _signIn_SignIn_Token_TokenFromTokenEntityMapper.Map(snapshot.GetEntity<global::client.State.TokenEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.ISignIn_SignIn_Errors>? MapISignIn_SignIn_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.ISignIn_SignIn_Errors>();
            foreach (global::client.State.ErrorData child in list)
            {
                errors.Add(MapNonNullableISignIn_SignIn_Errors(child, snapshot));
            }

            return errors;
        }

        private global::client.ISignIn_SignIn_Errors MapNonNullableISignIn_SignIn_Errors(global::client.State.ErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISignIn_SignIn_Errors returnValue = default !;
            if (data.__typename.Equals("Error", global::System.StringComparison.Ordinal))
            {
                returnValue = new SignIn_SignIn_Errors_Error(data.Field ?? throw new global::System.ArgumentNullException(), data.Info ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SignInResultInfo(global::client.State.LoginPayloadData signIn, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SignIn = signIn;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::client.State.LoginPayloadData SignIn
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SignInResultInfo(SignIn, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignIn_SignIn_Token_TokenFromTokenEntityMapper : global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, SignIn_SignIn_Token_Token>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SignIn_SignIn_Token_TokenFromTokenEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public SignIn_SignIn_Token_Token Map(global::client.State.TokenEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new SignIn_SignIn_Token_Token(entity.RefreshToken, entity.AccessToken);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddOrderBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddOrderResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IAddOrderResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AddOrderBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IAddOrderResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddOrderResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddOrderResult Result, AddOrderResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddOrderResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddOrderResult, AddOrderResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddOrderResultInfo(DeserializeNonNullableIAddOrder_AddOrder(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addOrder")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.PayloadData DeserializeNonNullableIAddOrder_AddOrder(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Payload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.PayloadData(typename, success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: DeserializeIAddOrder_AddOrder_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? DeserializeIAddOrder_AddOrder_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.State.ErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                errors.Add(DeserializeNonNullableIAddOrder_AddOrder_Errors(child));
            }

            return errors;
        }

        private global::client.State.ErrorData DeserializeNonNullableIAddOrder_AddOrder_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Error", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.ErrorData(typename, field: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "field")), info: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "info")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddRouteBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddRouteResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IAddRouteResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AddRouteBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IAddRouteResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddRouteResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddRouteResult Result, AddRouteResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddRouteResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddRouteResult, AddRouteResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddRouteResultInfo(DeserializeNonNullableIAddRoute_AddRoute(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addRoute")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.PayloadData DeserializeNonNullableIAddRoute_AddRoute(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Payload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.PayloadData(typename, success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: DeserializeIAddRoute_AddRoute_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? DeserializeIAddRoute_AddRoute_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.State.ErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                errors.Add(DeserializeNonNullableIAddRoute_AddRoute_Errors(child));
            }

            return errors;
        }

        private global::client.State.ErrorData DeserializeNonNullableIAddRoute_AddRoute_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Error", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.ErrorData(typename, field: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "field")), info: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "info")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddSotrudnikBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddSotrudnikResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IAddSotrudnikResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AddSotrudnikBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IAddSotrudnikResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddSotrudnikResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddSotrudnikResult Result, AddSotrudnikResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddSotrudnikResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddSotrudnikResult, AddSotrudnikResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddSotrudnikResultInfo(DeserializeNonNullableIAddSotrudnik_AddSotrudnik(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addSotrudnik")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.PayloadData DeserializeNonNullableIAddSotrudnik_AddSotrudnik(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Payload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.PayloadData(typename, success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: DeserializeIAddSotrudnik_AddSotrudnik_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? DeserializeIAddSotrudnik_AddSotrudnik_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.State.ErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                errors.Add(DeserializeNonNullableIAddSotrudnik_AddSotrudnik_Errors(child));
            }

            return errors;
        }

        private global::client.State.ErrorData DeserializeNonNullableIAddSotrudnik_AddSotrudnik_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Error", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.ErrorData(typename, field: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "field")), info: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "info")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddAirBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddAirResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IAddAirResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AddAirBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IAddAirResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddAirResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddAirResult Result, AddAirResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddAirResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddAirResult, AddAirResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddAirResultInfo(DeserializeNonNullableIAddAir_AddAir(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addAir")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.PayloadData DeserializeNonNullableIAddAir_AddAir(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Payload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.PayloadData(typename, success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: DeserializeIAddAir_AddAir_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? DeserializeIAddAir_AddAir_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.State.ErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                errors.Add(DeserializeNonNullableIAddAir_AddAir_Errors(child));
            }

            return errors;
        }

        private global::client.State.ErrorData DeserializeNonNullableIAddAir_AddAir_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Error", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.ErrorData(typename, field: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "field")), info: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "info")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetAirsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetAirsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IGetAirsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetAirsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IGetAirsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAirsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAirsResult Result, GetAirsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetAirsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAirsResult, GetAirsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.AirConnectionData? airsId = default !;
            _entityStore.Update(session =>
            {
                airsId = DeserializeIGetAirs_Airs(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "airs"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAirsResultInfo(airsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.AirConnectionData? DeserializeIGetAirs_Airs(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AirConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.AirConnectionData(typename, nodes: UpdateIGetAirs_Airs_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetAirs_Airs_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var airs = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                airs.Add(UpdateNonNullableIGetAirs_Airs_NodesEntity(session, child, entityIds));
            }

            return airs;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetAirs_Airs_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Air", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.AirEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.AirEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bortNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "model")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "date_create")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lifeTime")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isActive")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "seats")), UpdateNonNullableIGetAirs_Airs_Nodes_SotrudnikEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sotrudnik"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.AirEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bortNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "model")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "date_create")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lifeTime")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isActive")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "seats")), UpdateNonNullableIGetAirs_Airs_Nodes_SotrudnikEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sotrudnik"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetAirs_Airs_Nodes_SotrudnikEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Sotrudnik", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.SotrudnikEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.SotrudnikEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last_name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sur_name")), entity.Id, entity.Phone, entity.Stage, entity.Addres));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.SotrudnikEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last_name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sur_name")), default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetClientsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetClientsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IGetClientsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetClientsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IGetClientsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetClientsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetClientsResult Result, GetClientsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetClientsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetClientsResult, GetClientsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.ClientConnectionData? clientsId = default !;
            _entityStore.Update(session =>
            {
                clientsId = DeserializeIGetClients_Clients(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "clients"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetClientsResultInfo(clientsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.ClientConnectionData? DeserializeIGetClients_Clients(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ClientConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.ClientConnectionData(typename, nodes: UpdateIGetClients_Clients_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetClients_Clients_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var clients = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                clients.Add(UpdateNonNullableIGetClients_Clients_NodesEntity(session, child, entityIds));
            }

            return clients;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClients_Clients_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Client", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.ClientEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.ClientEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "surName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addres")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportSeia")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportNumber"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.ClientEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "surName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addres")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportSeia")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportNumber"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetFlightsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetFlightsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IGetFlightsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetFlightsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IGetFlightsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFlightsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFlightsResult Result, GetFlightsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetFlightsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFlightsResult, GetFlightsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.FlightConnectionData? flightsId = default !;
            _entityStore.Update(session =>
            {
                flightsId = DeserializeIGetFlights_Flights(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flights"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFlightsResultInfo(flightsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.FlightConnectionData? DeserializeIGetFlights_Flights(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("FlightConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.FlightConnectionData(typename, nodes: UpdateIGetFlights_Flights_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetFlights_Flights_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var flights = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                flights.Add(UpdateNonNullableIGetFlights_Flights_NodesEntity(session, child, entityIds));
            }

            return flights;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFlights_Flights_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.FlightEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.FlightEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateStart")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeStart")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isActive")), UpdateNonNullableIGetFlights_Flights_Nodes_RouteEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "route"), entityIds), UpdateNonNullableIGetFlights_Flights_Nodes_AirEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "air"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.FlightEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateStart")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeStart")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isActive")), UpdateNonNullableIGetFlights_Flights_Nodes_RouteEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "route"), entityIds), UpdateNonNullableIGetFlights_Flights_Nodes_AirEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "air"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFlights_Flights_Nodes_RouteEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.RouteEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), entity.Price, entity.Id));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFlights_Flights_Nodes_AirEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Air", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.AirEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.AirEntity(entity.Id, entity.BortNumber, entity.Model, entity.Date_create, entity.LifeTime, entity.IsActive, DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "seats")), entity.Sotrudnik));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.AirEntity(default !, default !, default !, default !, default !, default !, DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "seats")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetOrdersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetOrdersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IGetOrdersResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetOrdersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IGetOrdersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetOrdersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetOrdersResult Result, GetOrdersResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetOrdersResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetOrdersResult, GetOrdersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.OrderConnectionData? ordersId = default !;
            _entityStore.Update(session =>
            {
                ordersId = DeserializeIGetOrders_Orders(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orders"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetOrdersResultInfo(ordersId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.OrderConnectionData? DeserializeIGetOrders_Orders(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("OrderConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.OrderConnectionData(typename, nodes: UpdateIGetOrders_Orders_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetOrders_Orders_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var orders = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                orders.Add(UpdateNonNullableIGetOrders_Orders_NodesEntity(session, child, entityIds));
            }

            return orders;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.OrderEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.OrderEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mesto")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "counts")), UpdateNonNullableIGetOrders_Orders_Nodes_ClientEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "client"), entityIds), UpdateNonNullableIGetOrders_Orders_Nodes_FlightEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flight"), entityIds), UpdateNonNullableIGetOrders_Orders_Nodes_CardEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "card"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.OrderEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mesto")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "counts")), UpdateNonNullableIGetOrders_Orders_Nodes_ClientEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "client"), entityIds), UpdateNonNullableIGetOrders_Orders_Nodes_FlightEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flight"), entityIds), UpdateNonNullableIGetOrders_Orders_Nodes_CardEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "card"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_Nodes_ClientEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Client", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.ClientEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.ClientEntity(entity.Id, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "surName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")), entity.Addres, DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportSeia")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportNumber"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.ClientEntity(default !, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "surName")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")), default !, DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportSeia")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "passportNumber"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_Nodes_FlightEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Flight", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.FlightEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.FlightEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateStart")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeStart")), entity.IsActive, UpdateNonNullableIGetOrders_Orders_Nodes_Flight_RouteEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "route"), entityIds), entity.Air));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.FlightEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateStart")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeStart")), default !, UpdateNonNullableIGetOrders_Orders_Nodes_Flight_RouteEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "route"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_Nodes_Flight_RouteEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.RouteEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), entity.Id));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOrders_Orders_Nodes_CardEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Card", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.CardEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.CardEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.CardEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetRoutesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetRoutesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IGetRoutesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetRoutesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IGetRoutesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetRoutesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetRoutesResult Result, GetRoutesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetRoutesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetRoutesResult, GetRoutesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.RouteConnectionData? routesId = default !;
            _entityStore.Update(session =>
            {
                routesId = DeserializeIGetRoutes_Routes(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "routes"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetRoutesResultInfo(routesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.RouteConnectionData? DeserializeIGetRoutes_Routes(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RouteConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.RouteConnectionData(typename, nodes: UpdateIGetRoutes_Routes_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetRoutes_Routes_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var routes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                routes.Add(UpdateNonNullableIGetRoutes_Routes_NodesEntity(session, child, entityIds));
            }

            return routes;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRoutes_Routes_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Route", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.RouteEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.RouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "start")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetSotrudniksBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetSotrudniksResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IGetSotrudniksResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetSotrudniksBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IGetSotrudniksResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetSotrudniksResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetSotrudniksResult Result, GetSotrudniksResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetSotrudniksResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetSotrudniksResult, GetSotrudniksResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.SotrudnikConnectionData? sotrudniksId = default !;
            _entityStore.Update(session =>
            {
                sotrudniksId = DeserializeIGetSotrudniks_Sotrudniks(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sotrudniks"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetSotrudniksResultInfo(sotrudniksId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.SotrudnikConnectionData? DeserializeIGetSotrudniks_Sotrudniks(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SotrudnikConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.SotrudnikConnectionData(typename, nodes: UpdateIGetSotrudniks_Sotrudniks_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetSotrudniks_Sotrudniks_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var sotrudniks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                sotrudniks.Add(UpdateNonNullableIGetSotrudniks_Sotrudniks_NodesEntity(session, child, entityIds));
            }

            return sotrudniks;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSotrudniks_Sotrudniks_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Sotrudnik", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.SotrudnikEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.SotrudnikEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last_name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sur_name")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stage")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addres"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.SotrudnikEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last_name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sur_name")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stage")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addres"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IRefreshTokenResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.IRefreshTokenResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public RefreshTokenBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.IRefreshTokenResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IRefreshTokenResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRefreshTokenResult Result, RefreshTokenResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IRefreshTokenResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRefreshTokenResult, RefreshTokenResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.LoginPayloadData refreshTokenId = default !;
            _entityStore.Update(session =>
            {
                refreshTokenId = DeserializeNonNullableIRefreshToken_RefreshToken(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RefreshTokenResultInfo(refreshTokenId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.LoginPayloadData DeserializeNonNullableIRefreshToken_RefreshToken(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LoginPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.LoginPayloadData(typename, token: UpdateIRefreshToken_RefreshToken_TokenEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "token"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIRefreshToken_RefreshToken_TokenEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Token", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.TokenEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.TokenEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accessToken"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.TokenEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accessToken"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SignInBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.ISignInResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::client.ISignInResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public SignInBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::client.ISignInResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<ISignInResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISignInResult Result, SignInResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ISignInResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISignInResult, SignInResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::client.State.LoginPayloadData signInId = default !;
            _entityStore.Update(session =>
            {
                signInId = DeserializeNonNullableISignIn_SignIn(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "signIn"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SignInResultInfo(signInId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::client.State.LoginPayloadData DeserializeNonNullableISignIn_SignIn(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LoginPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.LoginPayloadData(typename, token: UpdateISignIn_SignIn_TokenEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "token"), entityIds), success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: DeserializeISignIn_SignIn_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateISignIn_SignIn_TokenEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Token", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::client.State.TokenEntity? entity))
                {
                    session.SetEntity(entityId, new global::client.State.TokenEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accessToken"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::client.State.TokenEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accessToken"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? DeserializeISignIn_SignIn_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var errors = new global::System.Collections.Generic.List<global::client.State.ErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                errors.Add(DeserializeNonNullableISignIn_SignIn_Errors(child));
            }

            return errors;
        }

        private global::client.State.ErrorData DeserializeNonNullableISignIn_SignIn_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Error", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::client.State.ErrorData(typename, field: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "field")), info: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "info")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class PayloadData
    {
        public PayloadData(global::System.String __typename, global::System.Boolean? success = default !, global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Success = success;
            Errors = errors;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ErrorData
    {
        public ErrorData(global::System.String __typename, global::System.String? field = default !, global::System.String? info = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Field = field;
            Info = info;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.String? Field
        {
            get;
        }

        public global::System.String? Info
        {
            get;
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AirConnectionData
    {
        public AirConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes
        {
            get;
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ClientConnectionData
    {
        public ClientConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes
        {
            get;
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FlightConnectionData
    {
        public FlightConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes
        {
            get;
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OrderConnectionData
    {
        public OrderConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes
        {
            get;
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RouteConnectionData
    {
        public RouteConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes
        {
            get;
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SotrudnikConnectionData
    {
        public SotrudnikConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginPayloadData
    {
        public LoginPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? token = default !, global::System.Boolean? success = default !, global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Token = token;
            Success = success;
            Errors = errors;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::StrawberryShake.EntityId? Token
        {
            get;
        }

        public global::System.Boolean? Success
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::client.State.ErrorData>? Errors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GqlClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Air" => ParseAirEntityId(obj, __typename), "Sotrudnik" => ParseSotrudnikEntityId(obj, __typename), "Client" => ParseClientEntityId(obj, __typename), "Flight" => ParseFlightEntityId(obj, __typename), "Route" => ParseRouteEntityId(obj, __typename), "Order" => ParseOrderEntityId(obj, __typename), "Card" => ParseCardEntityId(obj, __typename), "Token" => ParseTokenEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Air" => FormatAirEntityId(entityId), "Sotrudnik" => FormatSotrudnikEntityId(entityId), "Client" => FormatClientEntityId(entityId), "Flight" => FormatFlightEntityId(entityId), "Route" => FormatRouteEntityId(entityId), "Order" => FormatOrderEntityId(entityId), "Card" => FormatCardEntityId(entityId), "Token" => FormatTokenEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseAirEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatAirEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSotrudnikEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatSotrudnikEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseClientEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatClientEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseFlightEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatFlightEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRouteEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatRouteEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrderEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatOrderEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCardEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatCardEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTokenEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatTokenEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GqlClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GqlClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public static partial class GqlClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::client.State.GqlClientStoreAccessor> AddGqlClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::client.State.GqlClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddOrderMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddRouteMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddSotrudnikMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddAirMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetAirsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetClientsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetFlightsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetOrdersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetRoutesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetSotrudniksQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.RefreshTokenMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.SignInMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::client.State.GqlClientStoreAccessor>("GqlClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GqlClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, global::client.GetAirs_Airs_Nodes_Air>, global::client.State.GetAirs_Airs_Nodes_AirFromAirEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, global::client.GetAirs_Airs_Nodes_Sotrudnik_Sotrudnik>, global::client.State.GetAirs_Airs_Nodes_Sotrudnik_SotrudnikFromSotrudnikEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, global::client.GetClients_Clients_Nodes_Client>, global::client.State.GetClients_Clients_Nodes_ClientFromClientEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, global::client.GetFlights_Flights_Nodes_Flight>, global::client.State.GetFlights_Flights_Nodes_FlightFromFlightEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, global::client.GetFlights_Flights_Nodes_Route_Route>, global::client.State.GetFlights_Flights_Nodes_Route_RouteFromRouteEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.AirEntity, global::client.GetFlights_Flights_Nodes_Air_Air>, global::client.State.GetFlights_Flights_Nodes_Air_AirFromAirEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.OrderEntity, global::client.GetOrders_Orders_Nodes_Order>, global::client.State.GetOrders_Orders_Nodes_OrderFromOrderEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.ClientEntity, global::client.GetOrders_Orders_Nodes_Client_Client>, global::client.State.GetOrders_Orders_Nodes_Client_ClientFromClientEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.FlightEntity, global::client.GetOrders_Orders_Nodes_Flight_Flight>, global::client.State.GetOrders_Orders_Nodes_Flight_FlightFromFlightEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.CardEntity, global::client.GetOrders_Orders_Nodes_Card_Card>, global::client.State.GetOrders_Orders_Nodes_Card_CardFromCardEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, global::client.GetOrders_Orders_Nodes_Flight_Route_Route>, global::client.State.GetOrders_Orders_Nodes_Flight_Route_RouteFromRouteEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.RouteEntity, global::client.GetRoutes_Routes_Nodes_Route>, global::client.State.GetRoutes_Routes_Nodes_RouteFromRouteEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.SotrudnikEntity, global::client.GetSotrudniks_Sotrudniks_Nodes_Sotrudnik>, global::client.State.GetSotrudniks_Sotrudniks_Nodes_SotrudnikFromSotrudnikEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, global::client.RefreshToken_RefreshToken_Token_Token>, global::client.State.RefreshToken_RefreshToken_Token_TokenFromTokenEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::client.State.TokenEntity, global::client.SignIn_SignIn_Token_Token>, global::client.State.SignIn_SignIn_Token_TokenFromTokenEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddOrderResult>, global::client.State.AddOrderResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddOrderResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IAddOrderMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddOrderResult>, global::client.State.AddOrderBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IAddOrderResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IAddOrderResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddOrderResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.AddOrderMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IAddOrderMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddOrderMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddRouteResult>, global::client.State.AddRouteResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddRouteResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IAddRouteMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddRouteResult>, global::client.State.AddRouteBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IAddRouteResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IAddRouteResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddRouteResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.AddRouteMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IAddRouteMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddRouteMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddSotrudnikResult>, global::client.State.AddSotrudnikResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddSotrudnikResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IAddSotrudnikMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddSotrudnikResult>, global::client.State.AddSotrudnikBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IAddSotrudnikResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IAddSotrudnikResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddSotrudnikResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.AddSotrudnikMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IAddSotrudnikMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddSotrudnikMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddAirResult>, global::client.State.AddAirResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IAddAirResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IAddAirMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddAirResult>, global::client.State.AddAirBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IAddAirResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IAddAirResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IAddAirResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.AddAirMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IAddAirMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.AddAirMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetAirsResult>, global::client.State.GetAirsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetAirsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGetAirsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetAirsResult>, global::client.State.GetAirsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IGetAirsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IGetAirsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetAirsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GetAirsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGetAirsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetAirsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetClientsResult>, global::client.State.GetClientsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetClientsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGetClientsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetClientsResult>, global::client.State.GetClientsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IGetClientsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IGetClientsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetClientsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GetClientsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGetClientsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetClientsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetFlightsResult>, global::client.State.GetFlightsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetFlightsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGetFlightsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetFlightsResult>, global::client.State.GetFlightsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IGetFlightsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IGetFlightsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetFlightsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GetFlightsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGetFlightsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetFlightsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetOrdersResult>, global::client.State.GetOrdersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetOrdersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGetOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetOrdersResult>, global::client.State.GetOrdersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IGetOrdersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IGetOrdersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetOrdersResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GetOrdersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGetOrdersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetOrdersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetRoutesResult>, global::client.State.GetRoutesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetRoutesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGetRoutesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetRoutesResult>, global::client.State.GetRoutesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IGetRoutesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IGetRoutesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetRoutesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GetRoutesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGetRoutesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetRoutesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetSotrudniksResult>, global::client.State.GetSotrudniksResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IGetSotrudniksResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IGetSotrudniksQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetSotrudniksResult>, global::client.State.GetSotrudniksBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IGetSotrudniksResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IGetSotrudniksResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IGetSotrudniksResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GetSotrudniksQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGetSotrudniksQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GetSotrudniksQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.IRefreshTokenResult>, global::client.State.RefreshTokenResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.IRefreshTokenResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.IRefreshTokenMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IRefreshTokenResult>, global::client.State.RefreshTokenBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.IRefreshTokenResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.IRefreshTokenResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.IRefreshTokenResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.RefreshTokenMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IRefreshTokenMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.RefreshTokenMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::client.ISignInResult>, global::client.State.SignInResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::client.ISignInResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.ISignInMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.ISignInResult>, global::client.State.SignInBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::client.ISignInResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::client.ISignInResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::client.ISignInResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.SignInMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.ISignInMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.SignInMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::client.State.GqlClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.GqlClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::client.IGqlClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::client.GqlClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
